/*
 * (c) Copyright 2021 Swiss Post Ltd.
 */
package ch.post.it.evoting.votingserver.electioninformation.ws.application.operation;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.file.Paths;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import javax.annotation.Resource;
import javax.json.Json;
import javax.json.JsonObjectBuilder;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.hamcrest.CoreMatchers;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.arquillian.test.api.ArquillianResource;
import org.jboss.resteasy.client.jaxrs.internal.ClientResponse;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.ClassRule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.EnvironmentVariables;
import org.junit.runner.RunWith;

import ch.post.it.evoting.domain.election.model.tenant.TenantInstallationData;
import ch.post.it.evoting.votingserver.commons.util.ZipUtils;
import ch.post.it.evoting.votingserver.electioninformation.services.domain.model.ballotbox.BallotBox;
import ch.post.it.evoting.votingserver.electioninformation.services.domain.model.ballotbox.BallotBoxContent;
import ch.post.it.evoting.votingserver.electioninformation.services.domain.model.ballotbox.BallotBoxInformation;
import ch.post.it.evoting.votingserver.electioninformation.services.domain.model.ballotbox.CleansedBallotBox;
import ch.post.it.evoting.votingserver.electioninformation.services.domain.model.vote.SuccessfulVote;
import ch.post.it.evoting.votingserver.electioninformation.ws.platformdata.TestPlatformDataGenerator;

@RunWith(Arquillian.class)
public class CleansingOutputsArquillianTest {

	private static final String PERSISTENCE_CONTEXT_UNIT_NAME = "persistenceUnitJdbc";

	private static final String VOTING_CARD_ID_TEMPLATE = "votingCardId";

	private static final String ELECTION_EVENT_TEMPLATE = "electionEventId";

	private static final String TENANT_TEMPLATE = "tenantId";

	private static final String TENANT = "tenant";

	private static final String BALLOT_BOX_TEMPLATE = "ballotBoxId";

	private static final String TEST_TENANT_ID = "100";

	private static final String TEST_VOTING_CARD_ID = "31a32fbcac864b8ea96c48a505437721";

	private static final String TEST_BALLOT_BOX_ID = "7f59b097dcc6407e933fdfa94b9812b7";

	private static final String TEST_BALLOT_ID = "ballotid";

	private static final String TEST_ELECTION_EVENT_ID = "4bbd2887e9a848928487b99490c2296e";

	private static final String TEST_ENCRYPTED_VOTE = "TESTa390x283480ebdhfwifyqsdjugsd027tgrd";

	private static final String TEST_VOTE = "{\"vote\":{\"tenantId\":\"100\",\"electionEventId\":\"8cf40561cf6b468b8e45ea36d4dc8973\",\"ballotId\":\"9b0a0b5b89674b81b76c64c416dfd2cd\",\"ballotBoxId\":\"c5f8aa8c406648ad83f0179d042768de\",\"votingCardId\":\"fd86eef6ba6a4480bf060c54d89a5b66\",\"encryptedOptions\":\"13322155305986186281301113401141432100081068536672706640548641948475220935399744025325970623238444403835939745139195771036331715824976973887120734337338063816379146367892539989868125166832684122027021771274854187741330677336422976214538727428491495701844106056850894015229237493253075391464277017889696330226774409525066001778196930328391321588528910600488735984606435673732573490081833914413505588978872048126293337607011889135605940955037009694201462372307598258761274193860721705764852102524910785115404919189837244674631918575063587464779911775744802575168608695984306435990819296276606577941837757885088579515663;8461525321627213848955210696204943893811816975721120179567645122293649558123572770595287548526646883009746042839324819242801822986948951709459958122006656533084928698688083533857906535369130927685676175077559246409089569739682231069547430807953616100148343595818720969428611492640669919138772820755372040058961341460076713145376861559272488591500636175016046340711910810539493238218307044720764014063893856622036454936082247842512163131526633406074886439576727089529032382061079729373089011741479913761171870628784275874450975941013407722473237021764417505742041528061648308524572528693578266467992079492655185625349\",\"encryptedPartialChoiceCodes\":\"10992254675164379518190576971531311028158588853509056951005173122426969245385089152928448250964576036291696264178425929078321295313185265230913874665672625659586164151675885035771563276509749183223904100801820323178976318517739430336664427735345161715148913533559985699869427063376337360054870241747449345272798971674482214173337488570895704756333331733086402140088516613546837260870098422907082195265318912800155144392099583828225653385859976478625712745472218501108194591907252805878177256707387233079315140844625708786166022493736613128887738995717046962717989085380805230543459609048889698841532352213729350293312;2020107791827354704412164326766221041288538044208760637022302905116691390952973415745783455400892825925690845718468384317328710627192316039890654198393239813746904106085030450988880576068386925296617838184904299990443781738800754054309887383162982592861806606542493836727162791899239742036811478087228181253921792260012149594766232509745129884510328437931158306802514696749298701778621100096288373059646600910661018051226638809554661994340877327110548018280017319420300874921268371238523997694544848676332519140430593548221229927779239108533316051940131663104691807617252601988552841844423169362467905821434210192602;3200604867869481027487085649586020042279362519655025603779456838467347256070872381190707009307186221579531298667799032734622117811627262553820624833024664508675017101750776465946944565779659431974729775529259971297356167424608293386394329564861570718784026736640422824881811508339213640453720423250466610427620850968153957486613433078770896125209389077023299193515204107310452781251035932857606718491064942836904711333233822989445623355957967248646223225162443349623424598886267951189463708533064733831029672467336245478214380056949015375776425999203647041010628819138970710322604602929077945812566421511732053818113;11049349719401659964404316332978556533315442336194548645600663625096361452281084160476569757125823242925162619302314250945711261597345409513232110117202971264654809319254981591740083911042086604621826513941470070624842829261782149425437919023871689402407542210846297375510420011198420347523296704217492225110733653242107145800878671757059901005936353885206600418097888487600783192363361200060554929177319224665935192777112140286121538851789343727012625893378715505975949453433026486519368979830632458893567676813999949673151999449870345718056960994984861320057378298868036573461817551929939095577033001678412710312252;9654217591530906495363071702625887011313475738567298403507132013233534083656087121182173670244481284342030003420963266589765539166494385858519163403510334162066318880139976346839856581940054011097645440528583446256748614279453708937760485707413457583630164874853409985850620599348667145700066658269308536837701763776711517314129851185055644150081081057521053621229818181928239001560486488493001928865142367685078503972501447562858475281977999209978066807726956364923192427630425585368008092243592119960855748287372628983350822902454364246053211605326757486553899033755978218435295091568272054481872459243573233063943;12640972701207516921323603224865601850723874907979739286795830474648662083395234335447312166499914665446979568299747950192854360501236697670329537663807314209406495560838323533583596476168400628472314540202054629203003403379135653051705830901752214854332397834518265119113211302253421216949997866683677120653510065764970276678580676000286726594327513851232616889688225862939501917765530323103507799823491921007473613933221426117470113283397706879972975172474465341979148318910773341560664596106176147648105626104041789944626128432261078209700139467785665911086312645823123959611693948468869437392825274489039268899286;3031508201196539048064852118319227557645145302837784266304449073477666683238207178303237461856948697935754282535107723984250111734952205544220217371509906039213630390997905553393774333172475407117167213566662737344869903880708980714333868828113506820545155019850724014392903460624592980737274976834005834457984651814774790735128393757750412623209960387722687683239756105826103940682219361997923020400427653664722888477622895994070094524975922564903607850857737952749152820589760938322415736517210828891058581206432720076580714133977119207129275672330591182496317653087595865515624819044613473999295838310426568747844;8827655242773589390216679779921990402713093122998721292059806022652442283426387250823796452243899577926937162015172327962427066148588015266737962120855401592965458461158619011075900599516423374641985095882959921559701475320564032211199999878526100355012756352573953150890257190301244939966918404302021686094625255249537323996252343640910613679294504568966719684682394929309726489550517609586816904376675658843384853616942569959642856620411850158975486364771725375864331662824789086205900008207812576484840878531846079894992765939656838596037732745715703879696665098103544050658775577498767281551476239398568215367102;15966371397746816501987922383115172485957582893106125603162154287257960131960341502749998848680635235342541788355720536512021774000541941538210399104667761067890961139341872807005806820306034087758274929646058573893678240516803350735541578441915953707564616390698168461574881859166452503898362699445062324733989173198805106597278311903006619911434566690005504238332701787374463559565464507640478017445422881925334338010394459165577503464119659128107100922404264603229507035430668398994383961016845444901898172400334462241690577762251892899212897661024636899784194235996910851513719854183721063890339618737202313748849;1310300028687897223212886289759356784551023493437897404866887678028141934210196729315041981548704975587424233789710001621954260297117865576947882682966456989933977084476523021561774388130697275335572592264573628596341251596838566609331776673122472398215431456831604829228379240360103728184218741161568357011382365781279799142333064675292329867835132735757670213397780443773703171578278405883666955450056710443152904298718596780559786390506191484193981136364917157563185932283004483233696415050330143051793385319843712800042502904894017832719196932521595491536096651255223515066724984078508068310445365257537589159745;11584242196820748966548717646421802786300729822692564118208986081911995486009411201645183433106137424411433826653753981297601994652318544730270474776211294484799343474893379112520335630526318667598296787670993500496209207126605347242899278973540558342765893075130180376350268489989775531883794852749168060973840888684847722278894801869949350200516369040425029907186190793127192428538099318723376702798545378031542469284798416107688976147676589539145055727386201809855234569737393884065673378977057813750982023063749257666119007620197734432370169448395666491350125747082954612420263814280899679042806303000817402379086;12424549880140558866658999658799012114421102918200240268054034931928763701975470017910736295948463967644304585946121564826252443081319470979929332004935835390081222020836908925800956598047751264290658236443875334823127538271508559090849376944981349318490495718031439800448442690827732984002379705000913264845263575054413729151816378466958076820848900531885033422423908579793783108902423545305989614849734731151104816120206234338207570210871260312838293282018055191184628291461366047501212614854212573029192004009200376032609693736506139618386937284239295461984621484066746800755077295705149746572794705971666738314546;727816493076489327565441503100368797732063237920089913543180165126637250856969249354087308595280400094406827332308307597542439901848783090813886239591866270335707898611521327386136397241371398095727799253132045923981543474103749076489773946575652455928727344268966366242477391026745356409737420967102448958902043317632809902955653346157521505173272443602509037494606413507275645583174700100466110507175489610393605896839414020547734686377740278263230300738966915784841382927464425711413254878956304563274707300065691965593743703794067855922095816082631601134469319020259238166700876203487314545857969473551593697432;643807685759799578761531815713016259532613220018023646310205744345589853634839486043408509895202413391517453975866911656705580339872105961214721371808463473564102574546112419458625467333353054257907124188242072049031233009109133505252633062583561556129117565777836194813202482859541120710684856024535239151584389800272912894576499267121929133444095081918558148039802967399354484774488557618094777177112500388965409215048583944648949257337056927732517647261891008326929643575443197688460475454631848262154618853545228893703529571109915054659030994607157277512891277706524231861967169740075918264830466572621286192173;12507430464629270469145955222891121438780228502187542981795613745390936853060566442984653275569835227760973294990618249350345826566368888663361537137404767791242999917039938638280644813919785767698179042642679680832396081636255413763335704173013779118483298612267511580242118078746210068615601460526200384020422279450554699921124174836501394795879649138574376349645845493256086894808602638129469744954301297899157179707855626816930571889775836081138075976363218398410648190568559691967673727052501621315358418031125891617231512564398478814174867097461027874694680496123065618425576416053119103215745805486437613803839;4005760055764374224009896063832340792056013933853922540592063839802397671116875027694024249621977009133545182738154421927140174296725672726557152631131676701845096730022224963226755115643295357539755043163422570392251501859464563523680212532989948402974465235368819946460919502151431838359665105116725067377028250195090492920188369278486040709030556438451621675417192009871904039894418098308036408397163022659269634324606654029764398567970174106924821983504059858653940276948598193258945130135357342332916927666586176921813367680103689699078694787522587984296321833609650872879660272845593054396537187759070168271604;2757141099350396400736931536181886957099654766112222022500823085435129446745032636189333546986110944549113587755679493196925256623186779936013439971571806709932208406374455331051809200068684584611245631856755196766332973484047556705176229915093563703459377595175591297306472783547516180626104972980346390825911625062835843725964464991154224431156527415460783477641379762105752467499893246523298430073950300795641521904785887448177858635780638104612638941917792330406620448681018246610896810096650313912580697653672220942002543038295607309217536750318830393651305283010291301329457205730605933030496845172434538893712;3096745253886139157166537059882079697282634441448311714034566772826810627569683640221359098995804301192259827451351358641785728117514817708007316315156972951177666698399817230912332496209621764479658126829515330839141480702878978751318813752244314807663107294060886971568030972255205763413876537768835042476646913096456700529081843122376521879547096954923314288128813935737851860144803197866756557166551401759450678040660761810204069362775531934647823456901028020507303404851646402272987742520851869117404293187833944417620480078775450568722688701349471341150330990998386191076459855273867404676886595178735281272545;6912656742716496418635946667400960010603213175230926501126156875215846134576880205818255344563114191625972221560747016317496203727856878775159863684310804398027827108381497025960607931046388597474921609140740228268230792799137085942750282030328908299759214343468395410859882443647208707558761752949756602236269769140536600771224915621064166324938630230297447789984450668165009495747813926808846891100850466350391927401620160346236466177692533278274218383879353820802396305095342260574543151197775722047889103402982869812526771437002079489129692395674191325327438826473415509723973322437361438716991426439124266910755;5208742195425809862912489883422033825119654607871321954911487676333362756047156199685457151861205224273699702762466319431175953794517949101140605707251246354866839739715493129005457948041361737836672762377175780520637771632385697144591819885396468989280525049703737628457292016715518949297021596731882465960436884840165622172147979755641040533604615319413765693233861696180473420883910952428701863714424490559773257343701877140632242960597841443294928298541485663533704768126100139996220356598149240016642652049792806552760109799048440436278828244366742891837241701358746927551576186768620215243706197758630795849240;1420674170072940972206343423565491977137625410140477621030946291857438244750501002257684474668306397488507010933353431549611079071537141091064202288093175154060875075252154654235635719512909657371937788678703217927966912474133087594964376646371782696561264766499586201908104047147572214831961615196932428417395661519134636183631922017716350419681973658021981749006059939607903404878466796473028175230498446210864674337314925975748606612075950153048567144137535569409439363336621295497763585559160558110848283526197712744484888793267302045192101521433526440760566909780855334540484226548305858171463391362722322496985;5630184104978348495013660574862477803374634645605880135063892043878463158816732575713844917032539356224214700529684964652163456078354212313929158088005964094003246899578285049940272407554276965766358380564649525199457076769465782668429780203151906474638947166092968299024443488019926617652542986194785551054145132846480002008864216329575690856866409492965251240226420155396224498516548629013189672707046773649123967551090147818887032235559197482337928963678355681119830231473323542562732536761063640477026359268900485499904667132704751707925556694594937842529915058817251285901359177779388482376565008139902518553923;9808885905170460666269113014214921951758289365867327397968710285378327179473348333000102879968959086176870394982968043008275352431809004605049378953436145153948691683294473029093295295882941462909034970870049985143526603560949314024277566054934995314770365868857868278321817365532572655688858554458427786278379347199806213297026306170540254021694599634046527938561480129487359289118154289094845892318600718498385753477845489122622199791042560083804401791311600765990810294080123925192370947189835354358858620956339164723695952946949752822860442535706281719979789092857265359421178641288440987765014964123448507676747;13729389455680727566314677455062196927877661741183054619511707709876392581029820589425520200263481529908173093440200687957223448860669074787641851489313602818794680897979091891160959480075601737061662745837895927812147819132414051934907807116486403842817120635135933923071894598486068939184791344009504697468192391347101005674466411832804872523582140662123015983023116281193397515057038355325615417814827112134318169716036459488362983572255493372823892735990804817620499030150072041695700732733609244918660143430488993104496045990497488871642654945343219312986334817776919520043969648481387774359983803729733857650948;9558571701981112177271362386907491590000564981840217180675191943625362509071727635993428350965563047732041050400761605722941555578330484554345916601030605261584859236373921947591863694059652630239507517642773499082564452542861378788544234300907552715147961687143823194104362819203414746365525680365502248517163160887388964348283140866958045349689835371086926061765313703032789350548895899266025727786025319813982729847985198147993803630431828513361997919423229540108047272876050807381673799912967965373396024592337285969777801972373819012072040506660568746000934742422416805514839086644012199527907720250398678281763\",\"encryptedWriteIns\":\"5721798453883822823239918523723337626181244304022198901480850596276177068424157098315614360390261899163662386858462852824132481362080550355028595639639207335693661824494399227735486886231486433183779719698294676073736131575674998061797298088880818914408243195728430421669630716297022681001710927229426434962900569742872094696095763392814559262489729897710062824716124925487983366600114636374358726773226905531555982673103378231796549810692803021900540055777612245823730759460773051546364725299456682031083637341373571663067510377323497512335081292773937897387922164748228111877022204298537719190142391655532935714184;9217320108589327280917214235937586859188672382662012614088407396141644833741604752962862291506148843027721061002929885161035629329719814990433367344314653910102534701638820780186133739819978215046798893660690031724833932437136057707171893906508659677009982454057619815236629648777035604591524074915160682619302794182594217606169471444971218780569346119403852341472488420418500131525715114994177672314121176300638052383524307019627270891435743516116960594284446693527465471146319754506476707574900234618731819762759463660337022480807134869794654281513250682822880145753411842427524903739004235032309449016847211966162;2012223080052052038002297924083762352676395513728188290543915798861196411232167139048193581699399105291564444139862482505056616158012512730937103182781775415722849951633808744238232973547262952949347579161551323557937832568268802748871112574991016077602777768348929794952628815413277458537694180750065699400130017614543927784623306215231527355794684305308068797013255850956304516045483667450335259596649761985231778560857553809963644720450240047977571759044545161140180606243176272057966260285451378326871131443217435706148349785648341643424578456318388986847927756802257028307923405234024290815993357216331731899517;9693034626356223908524467279797811943983172806152118882163534160809034969650357009476131481466114016605160183536497734558623887279314474962809444061386098873564850108357431164752557409233689859980352485529215977961657491225316346963510486540395619292808070376401461389410595532681813286401428870998161558801957352749339760633177203008277508193312352506366999816875122339170469801580747103831511821877691103198152188902248014653198781056858973795383405085674223700846694945498024691166926329616683485582953087393439908897523385620021130794549523325234331487127914531321074891554812134674842035136436407715419341901184;4274020738457474004732208855097336326015200821124230616116512155284896409273425615897539341124463713283668128065618591972930996872959602307752347692535569350126464214792173385949713417785396531365946174431286402406973186276760837427077545422420460773165750682927317386285618362619418192344968895829873167696913102772340651029804353958426373672157035117298214125370432436269073097396086193108016193752704210439888995820605602547481605545654569634656688905277084462473287152590607606420115509486369566825284437069069022590968036019871216035462901259171662117889466204783801043576600596350453309420065192450735769108708;2578241434313272735956273606747240295591192178582278730393327767336667246516774318932049542769872568663614884615797741007885756767226964438491176897845414673610847867127767086017944882100092500057960463211115847023977521540545118741000447018696490620000437073177370924851835800078642196006577478755904045198585364741976069541452474066031349925325380404549017947263235669178737077481744942820559812070180277418003101289555219497052147321776521174827788518288763079051911822407987232988144550901808576694581983953086981091529928662399475500330290490863588347250258294496134037328841074312336315053462047812211912723462;5425405820846499912907759528051473498312881082403403952228886763052926805045024573574603049869585268133311289883623252827753483697659758822615126078548048019288148914023201049951172360876713032380618460437876917751933080806436123096210309311871490199586965376378179184089070999559857785599025163815297318550286440556921985703063058392465314177955196108151291394164388596208931966756457444055485414242292996378124177334674951608029810289557050342488149362891358240573197126184807259112035877908854105878652117823847871964055951021730305129653947899567990604711744811839633587433518205109989817789843888715406447219456;15508986686152145046073850958540490473303531293075275702405754137087302114255420629724960933380646788549442582807020834558528559598991590772687157042128163656167424968355613864868031636697218388583906533172026933063105512350855385823542894881657322609661091422159938673596034217665439338665562191549861851063992113883301769228108649388474643642401572166117447603604227122509936180931256477706435296368284503919164420299267610492440130686302120367832445851247170189229042943427244304034804546724109275488771628883970457424009350020272445067788003512332022165524892833878156263741808171263430193585226818187804446252283;7884363727373508989609287305890398863597008144167593886344453353723304842632933421599827203163720913976757795684282382999875986520181060090092772047306229778791419785695791969432354786139006735448150748192463449436934655088824844060914139527597186065900505409236375720970366251841166249463321470423626284450305814060202260024278524057777054442464374818931990896555285420287340415718713108604060522761504140843847034626647061702268682013206226708505514556965231708102892148269262618720576027225333443793078552012259663187933061789091001386949558557357012968084219986949837116208594666933035014763266236250709900964526;14429422249075070879930744659706505418781096144456474256915264738877314442862623736304386555912808506831964376777091374052852800681717561806131135032425112590801576298006038947103893291251486715713056390475463331333175729288748927041481932986494120334880356040501097876442921494458888873882966902260102032605594206235974497622790244893435096331248039561231158474931394596324357878936170853632413757921166967929728759041980268565431631859185212447996664634375182066977104615401571198122915436465448433549417709577364246816881014522513125821287931881733369970523446673592816766273344643877329641289638829046316961738610\",\"correctnessIds\":\"[[\\\"789a2be6a65c4fb983245bbd9d3f4977\\\"],[\\\"789a2be6a65c4fb983245bbd9d3f4977\\\"],[\\\"789a2be6a65c4fb983245bbd9d3f4977\\\"],[\\\"789a2be6a65c4fb983245bbd9d3f4977\\\"],[\\\"789a2be6a65c4fb983245bbd9d3f4977\\\"],[\\\"789a2be6a65c4fb983245bbd9d3f4977\\\"],[\\\"789a2be6a65c4fb983245bbd9d3f4977\\\"],[\\\"789a2be6a65c4fb983245bbd9d3f4977\\\"],[\\\"789a2be6a65c4fb983245bbd9d3f4977\\\"],[\\\"789a2be6a65c4fb983245bbd9d3f4977\\\"],[\\\"37b5d65cbfef4522a23bf5c239a09bd8\\\"],[\\\"183482cbb5a84ca19a5182653e81a6ef\\\"],[\\\"183482cbb5a84ca19a5182653e81a6ef\\\"],[\\\"183482cbb5a84ca19a5182653e81a6ef\\\"],[\\\"183482cbb5a84ca19a5182653e81a6ef\\\"],[\\\"183482cbb5a84ca19a5182653e81a6ef\\\"],[\\\"183482cbb5a84ca19a5182653e81a6ef\\\"],[\\\"183482cbb5a84ca19a5182653e81a6ef\\\"],[\\\"183482cbb5a84ca19a5182653e81a6ef\\\"],[\\\"183482cbb5a84ca19a5182653e81a6ef\\\"],[\\\"183482cbb5a84ca19a5182653e81a6ef\\\"],[\\\"dd27a51b9b154adfa087666eaecf6863\\\"],[\\\"49d6066df74d4b45b9f4f3db38290c76\\\"],[\\\"f6b71db017e34e7d9ee26b125b0f48a0\\\"]]\",\"verificationCardPublicKey\":\"eyJwdWJsaWNLZXkiOnsienBTdWJncm91cCI6eyJnIjoiQWc9PSIsInAiOiJBSUd0OHd6aXp5SjgraWE3MTZZZ1k0RmpHNWdKUmpmeitpQjNPZVdFTUxDT0xub1dHMHdId0ZReW8yVk54NGxnQlBEbVNJYjVOdEovMTJVM2RmZTdKZGdZakVNU2F6OUhVcmZvd0hOd0N1RDFWVm1EWHhVdnl4UFNWNS9pc3M3YTg1c29wdlI5bjA5aW12dnA4WERmUE51Y2NkMTBUUXdHU0tWdDJ2Tjd2U01yZ1FPc0dFdUJCc0Vtc2RsUmlsNCt4OU5UWXBoc2MvN3ZUVjlwUk40VStaSTV5VGJCb2Y2U0ZjSDVtd0FhdGxaQi9SenR3QTF3aDNxVVVneUx6L2tUS3FUUmJhUGM1VzErTERQQlpuTWlhVFdxNzg2NDE4cGlvNG9NODZtVkl0aGZFLzM0UzBrbjhHcEpHek5GMTJOemJWUXpicHY2WXBtclBLRzFGZmFRUHdjPSIsInEiOiJRTmI1aG5GbmtUNTlFMTNyMHhBeHdMR056QVNqRy9uOUVEdWM4c0lZV0VjWFBRc05wZ1BnS2hsUnNxYmp4TEFDZUhNa1EzeWJhVC9yc3B1Nis5MlM3QXhHSVlrMW42T3BXL1JnT2JnRmNIcXFyTUd2aXBmbGlla3J6L0ZaWjIxNXpaUlRlajdQcDdGTmZmVDR1RytlYmM0NDdyb21oZ01rVXJidGViM2VrWlhBZ2RZTUpjQ0RZSk5ZN0tqRkx4OWo2YW14VERZNS8zZW1yN1NpYndwOHlSemttMkRRLzBrSzRQek5nQTFiS3lEK2puYmdCcmhEdlVvcEJrWG4vSW1WVW1pMjBlNXl0cjhXR2VDek9aRTBtdFYzNTF4cjVURlJ4UVo1MU1xUmJDK0ovdndscEpQNE5TU05tYUxyc2JtMnFobTNUZjB4VE5XZVVOcUsrMGdmZ3c9PSJ9LCJlbGVtZW50cyI6WyJMR0dQeDh4WXQvYXBTakd0ZVhvalFSY2IwVVFKUlVwdkhEaEovZTBsSXJzdVlBZDNjRm41c1BmTFFreFFLTEM0MjEwWm8zUVorMWVUa1dISjdzTlBVSDY2K2EzVVR2c29WOEtJcGVWbXUzdExmZkpJbkJvUFFvaG1GUlVRZXlPaXBBK2JVVWdvS0ZQejBBZUMrYXA3b2srWEwrT0NNc255Vk5pSDBmTE9ub3BPS1VJczhkTzVRalBmRkovd01PaksxNWhFWnNhWUtVdGpsK2xzZ0QwUXAzam5RM2Zzajk2Um93THV3SnZCZzlIM203NXdtZnErbWNneFV5eHUwblhkRCszTTJxUlU4anNHWXptRjNtbS9wekxyRmpjSENsUlBTY2FoMzVac1k2WFNYcFI3YzRKZWJ0VDdYbGF2ZFNDMUU3R1ozV3ZUdmNsOXJuVlFtY0hnMUE9PSJdfX0=\",\"verificationCardPKSignature\":\"D69tkjUZWNL64q+q37tjVFE6xoAYwP9wo4BHeSnle5hWTepEZRDgUVVmJlC9PtTUjKPhLi4MaVoimZh/RLFneXGMNuCtZIcfHy1GH73SKQ+m84SwzClVM8GjSATeRizgt3zSG8LKJLVU8IUReA58JeC8UfIeTcQmqs/GeMoXeoWWQ05YUg1/gxg6+1WIv/zIh+rOH2YkqhyO8msdDuhFMm7p2CEKRDU46kFdzvCX8JqAaCkSt5segNMbIxzr7cbRoz3Uwuew6mqYN4/CuSiodLms3pybteuSfCduNQQr6/5PrsALFYsMCtGTORsb7ekyrS8sVvJ5CY84On7Sm3KK7g==\",\"signature\":\"frn+UEzkBSMeHY3Qm199N4vFBXhRj6uixDMSeGoGdLR9DceIbJPYlrHV3Ht9H3btE0V3V1jeZI3F0TPx+2C12uH2oAx1likQRl4CpGklPCjpI6i0kmIQ+bXuoE7uC7UVTdeasxLtVIO7Rl4yMYbQlYXDqUW1YaEKXmwiVySk+3k5INIVqRgEJv/T6oM9tpOPsO7xNC1CAMDGWueDG7+tvs1dDD2k4c9TJ7zoGEEwuUwVg4W0Jl3WQojNythlMobTcC9xngq+EnJmWGPfDeP+RH2tPLcVnsBe0vRpNUh5ltbj+stU+cRFw1NlQH8KS5Sx2eNgGXSdyZRiGMpHWvaoMQ==\",\"certificate\":\"-----BEGIN CERTIFICATE-----\\r\\nMIIDpzCCAo+gAwIBAgIUHdaeSpIiCNESFhqN8Hd5G835T6IwDQYJKoZIhvcNAQEL\\r\\nBQAwgYExODA2BgNVBAMML0NyZWRlbnRpYWxzIENBIDhjZjQwNTYxY2Y2YjQ2OGI4\\r\\nZTQ1ZWEzNmQ0ZGM4OTczMRYwFAYDVQQLDA1PbmxpbmUgVm90aW5nMRUwEwYDVQQK\\r\\nDAxPcmdhbml6YXRpb24xCTAHBgNVBAcMADELMAkGA1UEBhMCRVMwHhcNMTgwMzIz\\r\\nMTE1MTI2WhcNMjkxMjMxMjE1OTAwWjB3MS4wLAYDVQQDDCVTaWduIDRhMDJiOTI3\\r\\nOTZkYzg0NjVmNWFhNDdlOTMzYmNmNzBjMRYwFAYDVQQLDA1PbmxpbmUgVm90aW5n\\r\\nMRUwEwYDVQQKDAxPcmdhbml6YXRpb24xCTAHBgNVBAcMADELMAkGA1UEBhMCRVMw\\r\\nggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCyuQq5EgyhcdbT5zG/cmKS\\r\\nuxci9vvVLbfb7BXDLrLDlJPkgeNQMgORmhgXPEFFGtKVdc/ruRt8ITFX4Zo5ZqLt\\r\\niDgDIg3EJXKT3LKuY/KFmVDMN2RmJPaof8nehuGmpuPUb32WawNmqmA1WR5rNigL\\r\\nSPy8kmWjZw5MbmCy5DJ0eR78pHBjOsNUhPmT9FslosfZRVTwKqBYwwyk4XYv88Ix\\r\\nqUVvBkefDZyxLY2RSewJQhz38jf3sbCtuDRNFjiNKIke19zljSiqCtuX8qWDlF7l\\r\\n3LjN/Go5YsSROcEMsmhsIGH3IYJIpCOcCp273DtF3BpiIoPWrsx837qzjxZdMT6Z\\r\\nAgMBAAGjIDAeMAwGA1UdEwEB/wQCMAAwDgYDVR0PAQH/BAQDAgbAMA0GCSqGSIb3\\r\\nDQEBCwUAA4IBAQAgwi4Vl/A/Y6OML4uIFs7mDFShmtdzo8sibc0eBp7ac1qyShVU\\r\\nKRRcc0o5fp/KAEb1BuCaXLPTkOzSKJSNjbKh/m9EsDT53z7oe51R1jZwLp+vYYKU\\r\\nUR/8Gr4JNotyf19V9x5YYXDRdZkc/4h8TXekjl9oTd4s6NpEpz7/cs31HOR2HjvL\\r\\nzIbuncd1WPFZlPRuCHOpXTv+ixmFHFc6NtS/pzmjGSYjxx3SEsKO8oX+S/sU0tLz\\r\\ntEIVtQrV9b+r7pM34goc4YhzdGhia2lImhD91hl7vvnhQBStasjESEKmcrpiDzl1\\r\\n+Lk32PC0pk1VNEXXLbIVhMkbqcmBQObpiXBJ\\r\\n-----END CERTIFICATE-----\\r\\n\",\"credentialId\":\"4a02b92796dc8465f5aa47e933bcf70c\",\"authenticationTokenSignature\":\"xHT6TFy27sxsUfJonjWT93Jciq6YUDCNj2v6fywAK2+Z81bvl10Hy6p27gpJOdaZ1k31JSOhr5N67K9ItPW6hEm+E746NRlvPlsSUgK4R78eX15lFHhpyPYFsF7THi5IjDocSEMed7QKhYBt6t9NiFSdN9OYwnBmoFfkow7d5nusH7vhXI3llIkesHWXBU6C8v4TooLsC5xR2K0Sq9ejLh176DFqRR1R0UTQnwkHrGdUqszVdorQd/LdqMMcbnl8KbrPbmfM13vClOLRi8AVzzxINL+Bq0Vw4HtOTXV6OYNus0rjoTHmw2ol25HgIXCmAyoN73rVIbTI163Q3LmGaA==\",\"authenticationToken\":\"{\\\"id\\\":\\\"S1D69wL+1cwFuq5SFSsKVA==\\\",\\\"voterInformation\\\":{\\\"tenantId\\\":\\\"100\\\",\\\"electionEventId\\\":\\\"8cf40561cf6b468b8e45ea36d4dc8973\\\",\\\"votingCardId\\\":\\\"fd86eef6ba6a4480bf060c54d89a5b66\\\",\\\"ballotId\\\":\\\"9b0a0b5b89674b81b76c64c416dfd2cd\\\",\\\"credentialId\\\":\\\"4a02b92796dc8465f5aa47e933bcf70c\\\",\\\"verificationCardId\\\":\\\"429cf9a899dd46b19efbcdcad3b4a352\\\",\\\"ballotBoxId\\\":\\\"c5f8aa8c406648ad83f0179d042768de\\\",\\\"votingCardSetId\\\":\\\"89877e65d0c242be963e929212612d55\\\",\\\"verificationCardSetId\\\":\\\"9bebfacb052640fb8e2d92bd00cb7aec\\\"},\\\"timestamp\\\":\\\"1522837028710\\\",\\\"signature\\\":\\\"xHT6TFy27sxsUfJonjWT93Jciq6YUDCNj2v6fywAK2+Z81bvl10Hy6p27gpJOdaZ1k31JSOhr5N67K9ItPW6hEm+E746NRlvPlsSUgK4R78eX15lFHhpyPYFsF7THi5IjDocSEMed7QKhYBt6t9NiFSdN9OYwnBmoFfkow7d5nusH7vhXI3llIkesHWXBU6C8v4TooLsC5xR2K0Sq9ejLh176DFqRR1R0UTQnwkHrGdUqszVdorQd/LdqMMcbnl8KbrPbmfM13vClOLRi8AVzzxINL+Bq0Vw4HtOTXV6OYNus0rjoTHmw2ol25HgIXCmAyoN73rVIbTI163Q3LmGaA==\\\"}\",\"cipherTextExponentiations\":\"14804929156117378302249200455711576529117793079775609353159632655737384497760644118205614026570610305263664162709952364216316228549186344256921834833331468004811198907704859615886106730192831004987639464579807041285087223692016001567471711242487326833610059886981519317763700155797002504892114624142958641807089157994228731650293375617276890147369644970041120756261432646338212407674868854316644812158136294184501910663323348259098017439254474362282286505402840099056355774150210672747700114441364094194958599518852046444538788323913736954003936289460226585791234961364196252989911010847057470758261882675241258419639;726363477684787029949300937480819974841317603497439713005593722565009541031446329367218619825489852541266321411102677584689582712884130344746594132624917148777211067422796152742862308697769723855915482870797790737985755993123560294950686271200653256061932723731187832609633855730228371005494252919627487399038776690736862533857862099228554780886549529797061527246202168436734583013273714931942405025920694481803010256070328742544709523219896008354070649749037154210330488626714088143483894607360018115811017464315605174011467605182478713143996307467701817055339569127235227746613365813529061683120999516071039994143\",\"exponentiationProof\":\"{\\\"zkProof\\\":{\\\"q\\\":\\\"QNb5hnFnkT59E13r0xAxwLGNzASjG/n9EDuc8sIYWEcXPQsNpgPgKhlRsqbjxLACeHMkQ3ybaT/rspu6+92S7AxGIYk1n6OpW/RgObgFcHqqrMGvipfliekrz/FZZ215zZRTej7Pp7FNffT4uG+ebc447romhgMkUrbteb3ekZXAgdYMJcCDYJNY7KjFLx9j6amxTDY5/3emr7Sibwp8yRzkm2DQ/0kK4PzNgA1bKyD+jnbgBrhDvUopBkXn/ImVUmi20e5ytr8WGeCzOZE0mtV351xr5TFRxQZ51MqRbC+J/vwlpJP4NSSNmaLrsbm2qhm3Tf0xTNWeUNqK+0gfgw==\\\",\\\"hash\\\":\\\"c4j/8FybvN3MEOGTJreTwB25xFOiEdjG10dRbE+2RhQ=\\\",\\\"values\\\":[\\\"M6IeFOk5gT9g1mLDvrUtopFnIMmvJgWW/EdX8svW1I22CI5Hw8YSPYZJzUsd/JWvjV9Qiy4fNTsGVbFTW0iIxw0GEbjnuXzm6toW+Ofxvp3Ld7OQYFU8l4E3dEc6pbbuvBxZ6INdMiyxWarYSampQSbfYmeonAsIPnfnzbXa2xuX7hhI6tundZvmDtmOei/SUsWSILhm+OW+fn7T8GdPJ77X40KEZj2PM67IlHivOD3aGiXocSSO34OnHs2dzE6nkSP5cTQo0PP5p8KESCYWMnWFuk7St0aIJPdqcvf0N9aDazo8fhrcWygBzSpUuDKlRrdI6whKJJXqop7WmD7vkQ==\\\"]}}\",\"plaintextEqualityProof\":\"{\\\"zkProof\\\":{\\\"q\\\":\\\"QNb5hnFnkT59E13r0xAxwLGNzASjG/n9EDuc8sIYWEcXPQsNpgPgKhlRsqbjxLACeHMkQ3ybaT/rspu6+92S7AxGIYk1n6OpW/RgObgFcHqqrMGvipfliekrz/FZZ215zZRTej7Pp7FNffT4uG+ebc447romhgMkUrbteb3ekZXAgdYMJcCDYJNY7KjFLx9j6amxTDY5/3emr7Sibwp8yRzkm2DQ/0kK4PzNgA1bKyD+jnbgBrhDvUopBkXn/ImVUmi20e5ytr8WGeCzOZE0mtV351xr5TFRxQZ51MqRbC+J/vwlpJP4NSSNmaLrsbm2qhm3Tf0xTNWeUNqK+0gfgw==\\\",\\\"hash\\\":\\\"U2yaEvV2+4F/hkpQEtjlDHoEho9RbYn97ngkl1VR18U=\\\",\\\"values\\\":[\\\"F9a/C/bmkI8wBfwnM3Ck9p9SOw9y+fJX84ih7EmSZ9T6RJPZ0KyrfYPZ5AWGRnuWw81Q7E/0ojOHxvzJt1rB+brY6p1mjAmSQBZTbAmWVpqeP0AEplrAxaPAZ9mSb8iZccDnhfRIT+fJNWm4BZddx1sKT08kSB85eknyVdFNHFBCLZXXBV9yJFx35WTdCbj6YmM5FLk4nLOss1OtmJ09Xno2xwFCCJ4f4XP9c5Pwg4GAjK9ND77u3v3dmbje26W9OjoTUAe8XRl86dtBygBYMNZ2eY13P25Onzu3q2SJkBISWcguwSBsE8GEYftiphchhyUuafahoV/JkyIwW6B3/w==\\\",\\\"CYI18Ve7fP5yEZ/k25xvpOP0U9KA2zEBNOD84tAVdJcEa83LYuScMioZc9WW1nxbQIs8zkHxVmaoRl/PFo/42lM8h/fR1qN5tz1bKJdIIp0PZxYuT54oj5S1x7GojYTrV5Tkq3QJX6tDID/U2WHUjTZBB0zPhvatjRxphCFOzDCQovCwjCNpa5FoOIQzGoZxK9oMiA82pNSTZZEfv+/9TjQJN6esnl9k2rdEM6zy+zuDa7YdwwPeroRgnavWb1W+Q/VMsUYLwH+KJ1co8d7dExEdxEZHZHCmkpHWUH2ab4Q51ylFe4HZcUyKwmAZg5+6oFm/jgYNENsI0g0nYB6GiA==\\\"]}}\",\"verificationCardId\":\"429cf9a899dd46b19efbcdcad3b4a352\",\"verificationCardSetId\":\"9bebfacb052640fb8e2d92bd00cb7aec\"},\"authenticationToken\":{\"id\":\"S1D69wL+1cwFuq5SFSsKVA==\",\"voterInformation\":{\"tenantId\":\"100\",\"electionEventId\":\"8cf40561cf6b468b8e45ea36d4dc8973\",\"votingCardId\":\"fd86eef6ba6a4480bf060c54d89a5b66\",\"ballotId\":\"9b0a0b5b89674b81b76c64c416dfd2cd\",\"credentialId\":\"4a02b92796dc8465f5aa47e933bcf70c\",\"verificationCardId\":\"429cf9a899dd46b19efbcdcad3b4a352\",\"ballotBoxId\":\"c5f8aa8c406648ad83f0179d042768de\",\"votingCardSetId\":\"89877e65d0c242be963e929212612d55\",\"verificationCardSetId\":\"9bebfacb052640fb8e2d92bd00cb7aec\"},\"timestamp\":\"1522837028710\",\"signature\":\"xHT6TFy27sxsUfJonjWT93Jciq6YUDCNj2v6fywAK2+Z81bvl10Hy6p27gpJOdaZ1k31JSOhr5N67K9ItPW6hEm+E746NRlvPlsSUgK4R78eX15lFHhpyPYFsF7THi5IjDocSEMed7QKhYBt6t9NiFSdN9OYwnBmoFfkow7d5nusH7vhXI3llIkesHWXBU6C8v4TooLsC5xR2K0Sq9ejLh176DFqRR1R0UTQnwkHrGdUqszVdorQd/LdqMMcbnl8KbrPbmfM13vClOLRi8AVzzxINL+Bq0Vw4HtOTXV6OYNus0rjoTHmw2ol25HgIXCmAyoN73rVIbTI163Q3LmGaA==\"}}";

	private static final String TEST_VOTE_COMPUTATION_RESULTS = "computationResults";

	private static final String TRACK_ID_HEADER = "X-Request-ID";

	private static final String TEST_TRACK_ID = "TestTrackingId";

	private static final String TEST_SIGNATURE = "signature";

	private static final String JSON_PARAMETER_DATE_FROM = "startDate";

	private static final String JSON_PARAMETER_DATE_TO = "endDate";

	private static final String JSON_PARAMETER_GRACE_PERIOD = "gracePeriod";

	private static final String JSON_PARAMETER_TEST = "test";

	private static final String JSON_PARAMETER_ELECTION_EVENT = "electionEvent";

	private static final String JSON_PARAMETER_ID = "id";

	private static final String JSON_PARAMETER_PASSWORD_KEYSTORE = "passwordKeystore";

	private static final String EI_BASE_URL_TENANT = "tenantdata";

	private static final String URL_UPLOAD_TENANT = EI_BASE_URL_TENANT + "/" + TENANT + "/" + TEST_TENANT_ID;

	private static final String KEYSTORE_PARAM = "keystore";

	private static final String TENANT_PASSWORD = "2222222222222222";

	private static final String SUCCESSFUL_VOTES_PATH = CleansingOutputsResource.RESOURCE_NAME + "/" + CleansingOutputsResource.SUCCESSFUL_VOTES_PATH;

	private static final String FAILED_VOTES_PATH = CleansingOutputsResource.RESOURCE_NAME + "/" + CleansingOutputsResource.FAILED_VOTES_PATH;
	private static final Map<String, Object> templates;
	@ClassRule
	public static EnvironmentVariables environmentVariables = new EnvironmentVariables();
	private static boolean tenantUploaded;
	private static TestPlatformDataGenerator testPlatformDataGenerator;

	static {
		environmentVariables.set("loggingpasswordsdirectory", Paths.get("target").toFile().getAbsolutePath());
		environmentVariables.set("tenantpasswordsdirectory", Paths.get("target").toFile().getAbsolutePath());
		environmentVariables.set("SYMMETRIC_MAX_ELEMENTS_CRYPTO_POOL", "50");
		environmentVariables.set("ASYMMETRIC_MAX_ELEMENTS_CRYPTO_POOL", "50");
		environmentVariables.set("PROOFS_MAX_ELEMENTS_CRYPTO_POOL", "50");
		environmentVariables.set("PRIMITIVES_MAX_ELEMENTS_CRYPTO_POOL", "50");
		environmentVariables.set("PRIMITIVES_MAX_ELEMENTS_CRYPTO_POOL", "50");
		environmentVariables.set("ELGAMAL_MAX_ELEMENTS_CRYPTO_POOL", "50");
		environmentVariables.set("STORES_MAX_ELEMENTS_CRYPTO_POOL", "50");
		environmentVariables.set("SYMMETRIC_MAX_ELEMENTS_CRYPTO_POOL", "50");
		templates = new HashMap<>();
		templates.put(TENANT_TEMPLATE, TEST_TENANT_ID);
		templates.put(ELECTION_EVENT_TEMPLATE, TEST_ELECTION_EVENT_ID);
		templates.put(VOTING_CARD_ID_TEMPLATE, TEST_VOTING_CARD_ID);
		templates.put(BALLOT_BOX_TEMPLATE, TEST_BALLOT_BOX_ID);
	}

	@PersistenceContext(name = PERSISTENCE_CONTEXT_UNIT_NAME)
	private EntityManager entityManager;
	@Resource
	private UserTransaction userTransaction;
	@ArquillianResource
	private URL eiDeploymentURL;

	@BeforeClass
	public static void setUp() throws Exception {
		testPlatformDataGenerator = new TestPlatformDataGenerator(TEST_TENANT_ID, "EI", TENANT_PASSWORD);
		testPlatformDataGenerator.generate();
	}

	@Before
	public void setup() throws Exception {
		if (!tenantUploaded) {
			uploadTenant();
			tenantUploaded = true;
		}
		userTransaction.begin();
		entityManager.createQuery("DELETE FROM SuccessfulVote").executeUpdate();
		entityManager.createQuery("DELETE FROM BallotBoxInformation").executeUpdate();
		entityManager.createQuery("DELETE FROM BallotBoxContent").executeUpdate();
		entityManager.createQuery("DELETE FROM BallotBox").executeUpdate();
		entityManager.createQuery("DELETE FROM CleansedBallotBox").executeUpdate();
		userTransaction.commit();
	}

	@Test
	public void testGetSuccessfulVotesHappyPath() throws Exception {
		Client client = ClientBuilder.newClient();
		WebTarget webTarget = client.target(eiDeploymentURL.toString());
		int numberOfExistingSuccessfulVotes = 600;

		insertSuccessfulVotes(numberOfExistingSuccessfulVotes);
		insertBallotBoxInformationTestData(true);

		ClientResponse successfulVotesResponse = (ClientResponse) webTarget.path(SUCCESSFUL_VOTES_PATH).resolveTemplates(templates)
				.request(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_OCTET_STREAM).header(TRACK_ID_HEADER, TEST_TRACK_ID).get();

		assertThat(successfulVotesResponse.getStatus(), is(Response.Status.OK.getStatusCode()));

		InputStream successfulVotesStream = successfulVotesResponse.readEntity(InputStream.class);
		String str;
		StringBuilder stringBuilder = new StringBuilder();
		// Read votes until its signature (until blank line)
		try (BufferedReader reader = new BufferedReader(new InputStreamReader(successfulVotesStream))) {
			while (!Objects.equals(str = reader.readLine(), "")) {
				stringBuilder.append(str).append("\n");
			}
		}
		String[] votes = stringBuilder.toString().split("\n");

		assertThat(votes.length, is(numberOfExistingSuccessfulVotes));
	}

	@Test
	public void testGetFailedVotesHappyPath() throws Exception {
		Client client = ClientBuilder.newClient();
		WebTarget webTarget = client.target(eiDeploymentURL.toString());
		int numberOfCleansedVotes = 40;
		int numberOfVotes = 600;
		int numberOfFailedVotes = numberOfVotes - numberOfCleansedVotes;

		insertVotes(numberOfVotes);
		insertCleansedVotes(numberOfCleansedVotes);
		insertBallotBoxInformationTestData(true);

		ClientResponse successfulVotesResponse = (ClientResponse) webTarget.path(FAILED_VOTES_PATH).resolveTemplates(templates)
				.request(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_OCTET_STREAM).header(TRACK_ID_HEADER, TEST_TRACK_ID).get();

		assertThat(successfulVotesResponse.getStatus(), is(Response.Status.OK.getStatusCode()));

		InputStream successfulVotesStream = successfulVotesResponse.readEntity(InputStream.class);
		String str;
		StringBuilder stringBuilder = new StringBuilder();
		// Read votes until its signature (until blank line)
		try (BufferedReader reader = new BufferedReader(new InputStreamReader(successfulVotesStream))) {
			while (!Objects.equals(str = reader.readLine(), "")) {
				stringBuilder.append(str).append("\n");
			}
		}
		String[] votes = stringBuilder.toString().split("\n");

		assertThat(votes.length, is(numberOfFailedVotes));
	}

	@Test
	public void testGetSuccessfulVotesBallotBoxNotClosed() throws Exception {
		Client client = ClientBuilder.newClient();
		WebTarget webTarget = client.target(eiDeploymentURL.toString());

		insertBallotBoxInformationTestData(false);

		ClientResponse successfulVotesResponse = (ClientResponse) webTarget.path(SUCCESSFUL_VOTES_PATH).resolveTemplates(templates)
				.request(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_OCTET_STREAM).header(TRACK_ID_HEADER, TEST_TRACK_ID).get();

		assertThat(successfulVotesResponse.getStatus(), is(Response.Status.PRECONDITION_FAILED.getStatusCode()));

	}

	@Test
	public void testGetFailedVotesBallotBoxNotClosed() throws Exception {
		Client client = ClientBuilder.newClient();
		WebTarget webTarget = client.target(eiDeploymentURL.toString());

		insertBallotBoxInformationTestData(false);

		ClientResponse successfulVotesResponse = (ClientResponse) webTarget.path(FAILED_VOTES_PATH).resolveTemplates(templates)
				.request(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_OCTET_STREAM).header(TRACK_ID_HEADER, TEST_TRACK_ID).get();

		assertThat(successfulVotesResponse.getStatus(), is(Response.Status.PRECONDITION_FAILED.getStatusCode()));
	}

	private void insertCleansedVotes(int numberOfCleansedVotes) throws Exception {
		for (int i = 0; i < numberOfCleansedVotes; i++) {
			CleansedBallotBox cleansedVote = new CleansedBallotBox();
			cleansedVote.setBallotBoxId(TEST_BALLOT_BOX_ID);
			cleansedVote.setBallotId(TEST_BALLOT_ID);
			cleansedVote.setElectionEventId(TEST_ELECTION_EVENT_ID);
			cleansedVote.setEncryptedVote(TEST_ENCRYPTED_VOTE);
			cleansedVote.setTenantId(TEST_TENANT_ID);
			cleansedVote.setVotingCardId(TEST_VOTING_CARD_ID + "-" + i);
			saveEntity(cleansedVote);
		}
	}

	private void insertVotes(int numberOfVotes) throws Exception {
		for (int i = 0; i < numberOfVotes; i++) {
			BallotBox vote = new BallotBox();
			vote.setBallotBoxId(TEST_BALLOT_BOX_ID);
			vote.setBallotId(TEST_BALLOT_ID);
			vote.setElectionEventId(TEST_ELECTION_EVENT_ID);
			vote.setVote(TEST_VOTE);
			vote.setComputationResults(ZipUtils.zipText(TEST_VOTE_COMPUTATION_RESULTS));
			vote.setTenantId(TEST_TENANT_ID);
			vote.setVotingCardId(TEST_VOTING_CARD_ID + "-" + i);
			saveEntity(vote);
		}
	}

	private void insertSuccessfulVotes(int numberOfSuccessfulVotes) throws Exception {
		for (int i = 0; i < numberOfSuccessfulVotes; i++) {
			SuccessfulVote successfulVote = new SuccessfulVote();
			successfulVote.setTimestamp(ZonedDateTime.now());
			successfulVote.setTenantId(TEST_TENANT_ID);
			successfulVote.setElectionEventId(TEST_ELECTION_EVENT_ID);
			successfulVote.setBallotBoxId(TEST_BALLOT_BOX_ID);
			successfulVote.setVotingCardId(TEST_VOTING_CARD_ID + i);
			saveEntity(successfulVote);
		}
	}

	private void insertBallotBoxInformationTestData(boolean closedBallotBox) throws Exception {

		JsonObjectBuilder ballotBoxInfoJson = Json.createObjectBuilder();
		ballotBoxInfoJson.add(JSON_PARAMETER_DATE_FROM,
				ZonedDateTime.now(ZoneOffset.UTC).minusDays(-1).format(DateTimeFormatter.ISO_DATE_TIME.withZone(ZoneOffset.UTC)));

		if (closedBallotBox) {
			ballotBoxInfoJson
					.add(JSON_PARAMETER_DATE_TO, ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_DATE_TIME.withZone(ZoneOffset.UTC)));
		} else {
			ballotBoxInfoJson.add(JSON_PARAMETER_DATE_TO,
					ZonedDateTime.now(ZoneOffset.UTC).plusDays(7).format(DateTimeFormatter.ISO_DATE_TIME.withZone(ZoneOffset.UTC)));
		}

		ballotBoxInfoJson.add(JSON_PARAMETER_GRACE_PERIOD, "0");
		ballotBoxInfoJson.add(JSON_PARAMETER_TEST, false);

		BallotBoxInformation ballotBoxInformation = new BallotBoxInformation();
		ballotBoxInformation.setBallotBoxId(TEST_BALLOT_BOX_ID);
		ballotBoxInformation.setElectionEventId(TEST_ELECTION_EVENT_ID);
		ballotBoxInformation.setJson(ballotBoxInfoJson.build().toString());
		ballotBoxInformation.setSignature(TEST_SIGNATURE);
		ballotBoxInformation.setTenantId(TEST_TENANT_ID);
		saveEntity(ballotBoxInformation);

		JsonObjectBuilder ballotBoxContentJson = Json.createObjectBuilder();
		ballotBoxContentJson.add(JSON_PARAMETER_ELECTION_EVENT, Json.createObjectBuilder().add(JSON_PARAMETER_ID, TEST_ELECTION_EVENT_ID));
		// this should be the password for the ballot box keystore cyphered with the tenant public key
		ballotBoxContentJson.add(JSON_PARAMETER_PASSWORD_KEYSTORE, testPlatformDataGenerator.getEncryptedTenantKeystorePassword());
		ballotBoxContentJson.add(JSON_PARAMETER_ID, TEST_BALLOT_BOX_ID);
		// This should be the ballot box keystore
		ballotBoxContentJson.add(KEYSTORE_PARAM, testPlatformDataGenerator.getTenantKeystoreAsJSON());

		BallotBoxContent ballotBoxContent = new BallotBoxContent();
		ballotBoxContent.setBallotBoxId(TEST_BALLOT_BOX_ID);
		ballotBoxContent.setElectionEventId(TEST_ELECTION_EVENT_ID);
		ballotBoxContent.setJson(ballotBoxContentJson.build().toString());
		ballotBoxContent.setTenantId(TEST_TENANT_ID);

		saveEntity(ballotBoxContent);
	}

	private void uploadTenant() throws Exception {
		Client client = ClientBuilder.newClient();
		String eiTenantURL = eiDeploymentURL + URL_UPLOAD_TENANT;

		TenantInstallationData tenantInstallationData = new TenantInstallationData();
		tenantInstallationData.setEncodedData(testPlatformDataGenerator.getTenantKeystoreAsB64String());

		Response response = client.target(eiTenantURL).request(MediaType.APPLICATION_JSON).header(TRACK_ID_HEADER, TEST_TRACK_ID)
				.post(Entity.entity(tenantInstallationData, MediaType.APPLICATION_JSON_TYPE));

		assertThat(response.getStatus(), CoreMatchers.is(Response.Status.OK.getStatusCode()));
	}

	private <T> void saveEntity(T entityToSave) throws Exception {
		userTransaction.begin();
		entityManager.persist(entityToSave);
		userTransaction.commit();
	}
}
