/*
 * (c) Copyright 2021 Swiss Post Ltd.
 */
package ch.post.it.evoting.votingserver.electioninformation.services.domain.service;

import static org.junit.Assert.assertEquals;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.slf4j.Logger;

import ch.post.it.evoting.domain.election.model.vote.Vote;
import ch.post.it.evoting.domain.election.validation.ValidationErrorType;
import ch.post.it.evoting.votingserver.electioninformation.services.domain.model.rule.EncryptedOptionsRule;

/**
 * Test for encrypted options rule.
 */
@RunWith(MockitoJUnitRunner.class)
public class EncryptedOptionsRuleTest {

	@InjectMocks
	private final EncryptedOptionsRule encryptedOptionsRule = new EncryptedOptionsRule();
	@Mock
	private Logger LOGGER;

	@Test
	public void encryptedOptionsTwoBigIntegers() {
		Vote vote = new Vote();
		vote.setEncryptedOptions(
				"16091463005482469303585037926176374395972244781848903311491094070511189697942063662243981111978622366076587026736491134646488321603044630077002854825315617337486015889248515406064667468079307150193443191201921306061982012730303466164706605420244042370830037311013435290021253783027240877184036196233954024336053759124307860988050664942192944600097275052643081673460033491427149872981334370873181506723475406872436829150806759405589075807461000567663622304562123353567300523842507604861499533246885944440000417624856786220776868401313429767718202276667917836865573406511962930355902417349392037071649047425876554184246;"
						+ "10542630717205443717055023949630946441423584647436224197283281802386872687290237220643686787859464299744073987628528761492994293522914506335864738008097201530604893101124295960588297980961113053396352792577631046459302801107535562427815349553506709174844032467300441129230700561037462996564108763768799834449718309854662389463866457318193053742441897871176003877773704323923831797629839039432622488492742091447368131319886127633615925164979851331550747045049759539877369748933260826399654459252072927823797973620450102046978437253541352859925949380696811664639597580123857235010933129655474416701446620904060428609536");
		assertEquals(encryptedOptionsRule.execute(vote).getValidationErrorType(), ValidationErrorType.SUCCESS);
	}

	@Test
	public void encryptedOptionsIsNull() {
		Vote vote = new Vote();
		assertEquals(encryptedOptionsRule.execute(vote).getValidationErrorType(), ValidationErrorType.FAILED);
	}

	@Test
	public void encryptedOptionsEmptyString() {
		Vote vote = new Vote();
		vote.setEncryptedOptions("");
		assertEquals(encryptedOptionsRule.execute(vote).getValidationErrorType(), ValidationErrorType.FAILED);
	}

	@Test
	public void encryptedOptionsEmptySplitedString() {
		Vote vote = new Vote();
		vote.setEncryptedOptions(";");
		assertEquals(encryptedOptionsRule.execute(vote).getValidationErrorType(), ValidationErrorType.FAILED);
	}

	@Test
	public void encryptedOptionsOneBigInteger() {
		Vote vote = new Vote();
		vote.setEncryptedOptions(
				"16091463005482469303585037926176374395972244781848903311491094070511189697942063662243981111978622366076587026736491134646488321603044630077002854825315617337486015889248515406064667468079307150193443191201921306061982012730303466164706605420244042370830037311013435290021253783027240877184036196233954024336053759124307860988050664942192944600097275052643081673460033491427149872981334370873181506723475406872436829150806759405589075807461000567663622304562123353567300523842507604861499533246885944440000417624856786220776868401313429767718202276667917836865573406511962930355902417349392037071649047425876554184246");
		assertEquals(encryptedOptionsRule.execute(vote).getValidationErrorType(), ValidationErrorType.FAILED);
	}

	@Test
	public void encryptedOptionsStrings() {
		Vote vote = new Vote();
		vote.setEncryptedOptions(
				"160914630054824693035850XXXX374395972244781848903311491094070511189697942063662243981111978622366076587026736491134646488321603044630077002854825315617337486015889248515406064667468079307150193443191201921306061982012730303466164706605420244042370830037311013435290021253783027240877184036196233954024336053759124307860988050664942192944600097275052643081673460033491427149872981334370873181506723475406872436829150806759405589075807461000567663622304562123353567300523842507604861499533246885944440000417624856786220776868401313429767718202276667917836865573406511962930355902417349392037071649047425876554184246;"
						+ "10542630717205443717055023949630946441423584647436224197283281802386872687290237220643686787859464299744073987628528761492994293522914506335864738008097201530604893101124295960588297980961113053396352792577631046459302801107535562427815349553506709174844032467300441129230700561037462996564108763768799834449718309854662389463866457318193053742441897871176003877773704323923831797629839039432622488492742091447368131319886127633615925164979851331550747045049759539877369748933260826399654459252072927823797973620450102046978437253541352859925949380696811664639597580123857235010933129655474416701446620904060428609536");

		assertEquals(encryptedOptionsRule.execute(vote).getValidationErrorType(), ValidationErrorType.FAILED);
	}

	@Test
	public void encryptedOptionsMoreThanTwoBigIntegers() {
		Vote vote = new Vote();
		vote.setEncryptedOptions(
				"16091463005482469303585037926176374395972244781848903311491094070511189697942063662243981111978622366076587026736491134646488321603044630077002854825315617337486015889248515406064667468079307150193443191201921306061982012730303466164706605420244042370830037311013435290021253783027240877184036196233954024336053759124307860988050664942192944600097275052643081673460033491427149872981334370873181506723475406872436829150806759405589075807461000567663622304562123353567300523842507604861499533246885944440000417624856786220776868401313429767718202276667917836865573406511962930355902417349392037071649047425876554184246;"
						+ "10542630717205443717055023949630946441423584647436224197283281802386872687290237220643686787859464299744073987628528761492994293522914506335864738008097201530604893101124295960588297980961113053396352792577631046459302801107535562427815349553506709174844032467300441129230700561037462996564108763768799834449718309854662389463866457318193053742441897871176003877773704323923831797629839039432622488492742091447368131319886127633615925164979851331550747045049759539877369748933260826399654459252072927823797973620450102046978437253541352859925949380696811664639597580123857235010933129655474416701446620904060428609536;"
						+ "10542630717205443717055023949630946441423584647436224197283281802386872687290237220643686787859464299744073987628528761492994293522914506335864738008097201530604893101124295960588297980961113053396352792577631046459302801107535562427815349553506709174844032467300441129230700561037462996564108763768799834449718309854662389463866457318193053742441897871176003877773704323923831797629839039432622488492742091447368131319886127633615925164979851331550747045049759539877369748933260826399654459252072927823797973620450102046978437253541352859925949380696811664639597580123857235010933129655474416701446620904060428609536");
		assertEquals(encryptedOptionsRule.execute(vote).getValidationErrorType(), ValidationErrorType.FAILED);
	}

}
