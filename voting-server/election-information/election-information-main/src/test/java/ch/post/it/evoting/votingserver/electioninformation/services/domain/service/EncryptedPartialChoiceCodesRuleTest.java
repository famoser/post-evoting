/*
 * (c) Copyright 2021 Swiss Post Ltd.
 */
package ch.post.it.evoting.votingserver.electioninformation.services.domain.service;

import static org.junit.Assert.assertEquals;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.slf4j.Logger;

import ch.post.it.evoting.domain.election.model.vote.Vote;
import ch.post.it.evoting.domain.election.validation.ValidationErrorType;
import ch.post.it.evoting.votingserver.commons.beans.exceptions.ResourceNotFoundException;
import ch.post.it.evoting.votingserver.electioninformation.services.domain.model.rule.EncryptedPartialChoiceCodesRule;

/**
 * Test for encrypted options rule.
 */
@RunWith(MockitoJUnitRunner.class)
public class EncryptedPartialChoiceCodesRuleTest {

	@InjectMocks
	private final EncryptedPartialChoiceCodesRule rule = new EncryptedPartialChoiceCodesRule();
	@Mock
	private Logger LOGGER;

	@Test
	public void encryptedPartialChoiceCodeVotationContestType() throws ResourceNotFoundException {
		Vote vote = new Vote();
		String encryptedPartialChoiceCodes = "6080621998466045934375950070560875537880574167025907592035990405815928320870132835273557080459623780227450972954588252147395895145575746624413715165319288474266371592209076578787161726049503362457098740329652320618732836300159711541437769439249389646459094271197517965691178841018769548716572240533573597043021326814622547202249547135192124093189318184727722078735025606120422034760429926857337532867550989874130932508662748075626177407471220174274933772149236082408390471303834503916686691336921511423688942523495646773784802818351022467425088475113415196579528504266125496816327007131519940402946366139521551175923;7722096843600045109130833368234350477591911589565690861392642296090171342369222965390006586850398760700642033362757932302167316432949364361449445545568485993074382945394033350847220774007892963253526661207267758474617777696009422514539102125117039541227285050732681909965766373945594909220339020761228476983936776530405575905851678296559437659515128780175949692258866377715317944162945631302179958283625079244376187144886066839893602073725674813444333579750195687526447713337328576849752934337016369399964206065970539137900160410496799942475851702200225151090555249443589111065016373106860342189852933364832484841290;11697947923126332848332609479872549695719135511234318656960209898490410161741717066724435292275971047563861137916795968786724447400094356577175408236849777211242884433984122673704433640632110367256741902868182478513951577966290568791325840730977641118354543445023005890268537810760942826902905265388151770594665765003611912820699379612763350021528683162114305914672868226818690522259496611416508691994561262298365443514939179550025290629999098065400811551360627547514345643077421238114316616561645514736601139307080247902063510078366643943551621499686504798824051192074219935215585182333324147493518182674142941714872;8662591030286473412239990627943599835879974221647409083425609456312460307152410257456279033712165484852183129360675875141822816260282643089265876832773349390759082258607642639022547682200682128772410020121647423623605309473678773993711948395948023966225152778446792457647861885958398204671935372170446228414514259281857011847453792190309987642245463249057690837299996591760189954474672386900572341285349118527169316710466598393138263427911661264852022486320113359539727368417497356352092896144182639446195630623226719974120775226097993216780066355227560813483980573362197179897588818752397255876196675955827090773189";
		vote.setEncryptedPartialChoiceCodes(encryptedPartialChoiceCodes);

		String correctnessIds = "[[\"7d3ae3beeac146a494d31515688b3d00\"],[\"c692ff71e5834dbd88c22e74210fedb8\"],[\"88c5f1e55a9a460eb7ab569f790f6da9\"]]";
		vote.setCorrectnessIds(correctnessIds);

		assertEquals(rule.execute(vote).getValidationErrorType(), ValidationErrorType.SUCCESS);
	}

	@Test
	public void encryptedPartialChoiceCodesElectionContestType() throws ResourceNotFoundException {
		Vote vote = new Vote();
		String encryptedPartialChoiceCodes = "6080621998466045934375950070560875537880574167025907592035990405815928320870132835273557080459623780227450972954588252147395895145575746624413715165319288474266371592209076578787161726049503362457098740329652320618732836300159711541437769439249389646459094271197517965691178841018769548716572240533573597043021326814622547202249547135192124093189318184727722078735025606120422034760429926857337532867550989874130932508662748075626177407471220174274933772149236082408390471303834503916686691336921511423688942523495646773784802818351022467425088475113415196579528504266125496816327007131519940402946366139521551175923;7722096843600045109130833368234350477591911589565690861392642296090171342369222965390006586850398760700642033362757932302167316432949364361449445545568485993074382945394033350847220774007892963253526661207267758474617777696009422514539102125117039541227285050732681909965766373945594909220339020761228476983936776530405575905851678296559437659515128780175949692258866377715317944162945631302179958283625079244376187144886066839893602073725674813444333579750195687526447713337328576849752934337016369399964206065970539137900160410496799942475851702200225151090555249443589111065016373106860342189852933364832484841290;11697947923126332848332609479872549695719135511234318656960209898490410161741717066724435292275971047563861137916795968786724447400094356577175408236849777211242884433984122673704433640632110367256741902868182478513951577966290568791325840730977641118354543445023005890268537810760942826902905265388151770594665765003611912820699379612763350021528683162114305914672868226818690522259496611416508691994561262298365443514939179550025290629999098065400811551360627547514345643077421238114316616561645514736601139307080247902063510078366643943551621499686504798824051192074219935215585182333324147493518182674142941714872;8662591030286473412239990627943599835879974221647409083425609456312460307152410257456279033712165484852183129360675875141822816260282643089265876832773349390759082258607642639022547682200682128772410020121647423623605309473678773993711948395948023966225152778446792457647861885958398204671935372170446228414514259281857011847453792190309987642245463249057690837299996591760189954474672386900572341285349118527169316710466598393138263427911661264852022486320113359539727368417497356352092896144182639446195630623226719974120775226097993216780066355227560813483980573362197179897588818752397255876196675955827090773189";
		vote.setEncryptedPartialChoiceCodes(encryptedPartialChoiceCodes);
		String correctnessIds = "[[\"7d3ae3beeac146a494d31515688b3d00\"],[\"c692ff71e5834dbd88c22e74210fedb8\"],[\"88c5f1e55a9a460eb7ab569f790f6da9\"]]";
		vote.setCorrectnessIds(correctnessIds);

		assertEquals(rule.execute(vote).getValidationErrorType(), ValidationErrorType.SUCCESS);
	}

	@Test
	public void encryptedPartialChoiceCodeNull() throws ResourceNotFoundException {
		Vote vote = new Vote();
		String correctnessIds = "[[\"7d3ae3beeac146a494d31515688b3d00\"],[\"c692ff71e5834dbd88c22e74210fedb8\"],[\"88c5f1e55a9a460eb7ab569f790f6da9\"]]";
		vote.setCorrectnessIds(correctnessIds);

		assertEquals(rule.execute(vote).getValidationErrorType(), ValidationErrorType.FAILED);
	}

	@Test
	public void encryptedPartialChoiceCodeEmpty() throws ResourceNotFoundException {
		Vote vote = new Vote();
		vote.setEncryptedPartialChoiceCodes("");
		String correctnessIds = "[[\"7d3ae3beeac146a494d31515688b3d00\"],[\"c692ff71e5834dbd88c22e74210fedb8\"],[\"88c5f1e55a9a460eb7ab569f790f6da9\"]]";
		vote.setCorrectnessIds(correctnessIds);

		assertEquals(rule.execute(vote).getValidationErrorType(), ValidationErrorType.FAILED);
	}

	@Test
	public void encryptedPartialChoiceCodeSplitedEmpty() throws ResourceNotFoundException {
		Vote vote = new Vote();
		vote.setEncryptedPartialChoiceCodes("; ;");
		String correctnessIds = "[[\"7d3ae3beeac146a494d31515688b3d00\"],[\"c692ff71e5834dbd88c22e74210fedb8\"],[\"88c5f1e55a9a460eb7ab569f790f6da9\"]]";
		vote.setCorrectnessIds(correctnessIds);

		assertEquals(rule.execute(vote).getValidationErrorType(), ValidationErrorType.FAILED);
	}

	@Test
	public void correctnessIdsNull() throws ResourceNotFoundException {
		Vote vote = new Vote();
		String encryptedPartialChoiceCodes = "6080621998466045934375950070560875537880574167025907592035990405815928320870132835273557080459623780227450972954588252147395895145575746624413715165319288474266371592209076578787161726049503362457098740329652320618732836300159711541437769439249389646459094271197517965691178841018769548716572240533573597043021326814622547202249547135192124093189318184727722078735025606120422034760429926857337532867550989874130932508662748075626177407471220174274933772149236082408390471303834503916686691336921511423688942523495646773784802818351022467425088475113415196579528504266125496816327007131519940402946366139521551175923;7722096843600045109130833368234350477591911589565690861392642296090171342369222965390006586850398760700642033362757932302167316432949364361449445545568485993074382945394033350847220774007892963253526661207267758474617777696009422514539102125117039541227285050732681909965766373945594909220339020761228476983936776530405575905851678296559437659515128780175949692258866377715317944162945631302179958283625079244376187144886066839893602073725674813444333579750195687526447713337328576849752934337016369399964206065970539137900160410496799942475851702200225151090555249443589111065016373106860342189852933364832484841290;11697947923126332848332609479872549695719135511234318656960209898490410161741717066724435292275971047563861137916795968786724447400094356577175408236849777211242884433984122673704433640632110367256741902868182478513951577966290568791325840730977641118354543445023005890268537810760942826902905265388151770594665765003611912820699379612763350021528683162114305914672868226818690522259496611416508691994561262298365443514939179550025290629999098065400811551360627547514345643077421238114316616561645514736601139307080247902063510078366643943551621499686504798824051192074219935215585182333324147493518182674142941714872;8662591030286473412239990627943599835879974221647409083425609456312460307152410257456279033712165484852183129360675875141822816260282643089265876832773349390759082258607642639022547682200682128772410020121647423623605309473678773993711948395948023966225152778446792457647861885958398204671935372170446228414514259281857011847453792190309987642245463249057690837299996591760189954474672386900572341285349118527169316710466598393138263427911661264852022486320113359539727368417497356352092896144182639446195630623226719974120775226097993216780066355227560813483980573362197179897588818752397255876196675955827090773189";
		vote.setEncryptedPartialChoiceCodes(encryptedPartialChoiceCodes);

		assertEquals(rule.execute(vote).getValidationErrorType(), ValidationErrorType.FAILED);
	}

	@Test
	public void correctnessIdsEmpty() throws ResourceNotFoundException {
		Vote vote = new Vote();
		String encryptedPartialChoiceCodes = "6080621998466045934375950070560875537880574167025907592035990405815928320870132835273557080459623780227450972954588252147395895145575746624413715165319288474266371592209076578787161726049503362457098740329652320618732836300159711541437769439249389646459094271197517965691178841018769548716572240533573597043021326814622547202249547135192124093189318184727722078735025606120422034760429926857337532867550989874130932508662748075626177407471220174274933772149236082408390471303834503916686691336921511423688942523495646773784802818351022467425088475113415196579528504266125496816327007131519940402946366139521551175923;7722096843600045109130833368234350477591911589565690861392642296090171342369222965390006586850398760700642033362757932302167316432949364361449445545568485993074382945394033350847220774007892963253526661207267758474617777696009422514539102125117039541227285050732681909965766373945594909220339020761228476983936776530405575905851678296559437659515128780175949692258866377715317944162945631302179958283625079244376187144886066839893602073725674813444333579750195687526447713337328576849752934337016369399964206065970539137900160410496799942475851702200225151090555249443589111065016373106860342189852933364832484841290;11697947923126332848332609479872549695719135511234318656960209898490410161741717066724435292275971047563861137916795968786724447400094356577175408236849777211242884433984122673704433640632110367256741902868182478513951577966290568791325840730977641118354543445023005890268537810760942826902905265388151770594665765003611912820699379612763350021528683162114305914672868226818690522259496611416508691994561262298365443514939179550025290629999098065400811551360627547514345643077421238114316616561645514736601139307080247902063510078366643943551621499686504798824051192074219935215585182333324147493518182674142941714872;8662591030286473412239990627943599835879974221647409083425609456312460307152410257456279033712165484852183129360675875141822816260282643089265876832773349390759082258607642639022547682200682128772410020121647423623605309473678773993711948395948023966225152778446792457647861885958398204671935372170446228414514259281857011847453792190309987642245463249057690837299996591760189954474672386900572341285349118527169316710466598393138263427911661264852022486320113359539727368417497356352092896144182639446195630623226719974120775226097993216780066355227560813483980573362197179897588818752397255876196675955827090773189";
		vote.setEncryptedPartialChoiceCodes(encryptedPartialChoiceCodes);
		String correctnessIds = "";
		vote.setCorrectnessIds(correctnessIds);

		assertEquals(rule.execute(vote).getValidationErrorType(), ValidationErrorType.FAILED);
	}

	@Test
	public void correctnessIdsParsedEmpty() throws ResourceNotFoundException {
		Vote vote = new Vote();
		String encryptedPartialChoiceCodes = "6080621998466045934375950070560875537880574167025907592035990405815928320870132835273557080459623780227450972954588252147395895145575746624413715165319288474266371592209076578787161726049503362457098740329652320618732836300159711541437769439249389646459094271197517965691178841018769548716572240533573597043021326814622547202249547135192124093189318184727722078735025606120422034760429926857337532867550989874130932508662748075626177407471220174274933772149236082408390471303834503916686691336921511423688942523495646773784802818351022467425088475113415196579528504266125496816327007131519940402946366139521551175923;7722096843600045109130833368234350477591911589565690861392642296090171342369222965390006586850398760700642033362757932302167316432949364361449445545568485993074382945394033350847220774007892963253526661207267758474617777696009422514539102125117039541227285050732681909965766373945594909220339020761228476983936776530405575905851678296559437659515128780175949692258866377715317944162945631302179958283625079244376187144886066839893602073725674813444333579750195687526447713337328576849752934337016369399964206065970539137900160410496799942475851702200225151090555249443589111065016373106860342189852933364832484841290;11697947923126332848332609479872549695719135511234318656960209898490410161741717066724435292275971047563861137916795968786724447400094356577175408236849777211242884433984122673704433640632110367256741902868182478513951577966290568791325840730977641118354543445023005890268537810760942826902905265388151770594665765003611912820699379612763350021528683162114305914672868226818690522259496611416508691994561262298365443514939179550025290629999098065400811551360627547514345643077421238114316616561645514736601139307080247902063510078366643943551621499686504798824051192074219935215585182333324147493518182674142941714872;8662591030286473412239990627943599835879974221647409083425609456312460307152410257456279033712165484852183129360675875141822816260282643089265876832773349390759082258607642639022547682200682128772410020121647423623605309473678773993711948395948023966225152778446792457647861885958398204671935372170446228414514259281857011847453792190309987642245463249057690837299996591760189954474672386900572341285349118527169316710466598393138263427911661264852022486320113359539727368417497356352092896144182639446195630623226719974120775226097993216780066355227560813483980573362197179897588818752397255876196675955827090773189";
		vote.setEncryptedPartialChoiceCodes(encryptedPartialChoiceCodes);
		String correctnessIds = "[]";
		vote.setCorrectnessIds(correctnessIds);

		assertEquals(rule.execute(vote).getValidationErrorType(), ValidationErrorType.FAILED);
	}

}
