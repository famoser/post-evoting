BallotServiceImpl.create.start=Creating ballot with id: {} for tenant: {} and election event: {}.
BallotServiceImpl.create.electionEventFound=Election event found for tenant: {} and election event: {}.
BallotServiceImpl.create.electionEventNotFound=Election event not found for tenant: {} and election event: {}.
BallotServiceImpl.create.addingElectionsToBallot=Adding {} elections to the ballot with id: {}.
BallotServiceImpl.create.electionFound=Election with id: {} for election event: {} found.
BallotServiceImpl.create.electionNotFound=Election with id: {} for election event: {} not found.
BallotServiceImpl.create.contestFound=Contest with id: {} for election: {} found.
BallotServiceImpl.create.contestNotFound=Contest with id: {} for election: {} not found.
BallotServiceImpl.create.ballotSaved=Ballot with id: {} for tenant: {} and election event: {} successfully saved.
BallotServiceImpl.create.ballotNotSaved=Ballot with id: {} for tenant: {} and election event: {} not successfully saved as it already has {} votes of {} available
RuleExecutorImpl.execute.objectNull=The object is null. Can not be validated.
RuleExecutorImpl.execute.ruleListNull=The list of rules to validate a vote is null.
RuleExecutorImpl.execute.executingRule=Execute the rule: {}.
RuleExecutorImpl.execute.rulePassed=Rule passed!
RuleExecutorImpl.execute.ruleNotPassed=Rule not passed!
RuleExecutorImpl.execute.votePassedRules=The vote passed {} rules out of {}.
ConfigurationServiceImpl.create.creatingConfiguration=Creating rule configuration for tenant: {}, election: {}, and rule: {}.
ConfigurationServiceImpl.create.ruleNotDefined=Rule "{}" not defined.
ConfigurationServiceImpl.create.configurationSaved=Rule configuration for tenant: {}, election: {}, and rule: {} successfully created.
ValidationServiceImpl.validate.activeConfigurations=For the tenant: {} and ballot: {} there are {} active configurations.
ValidationServiceImpl.validate.ballotFound=Ballot found for id: {} and tenant: {}.
ValidationServiceImpl.validate.ballotNotFound=Ballot not found for id: {} and tenant: {}.
ValidationServiceImpl.validate.voteValidationResult=Vote is valid: {}.
ValidationServiceImpl.validate.ballotWithElections=The ballot with id: {} has {} elections.
ValidationServiceImpl.validate.ballotWithoutElections=The ballot with id: {} does not have elections.
ValidationServiceImpl.validate.endVoteValidation=End of validation\!
ValidationServiceImpl.validate.startVoteValidation=Start the validation of the vote of the tenant = {} for the ballot = {}.
ValidationServiceImpl.validate.voteValid=Result of validation: {}.
BallotBoxContentService.getBallotBoxContent.recoveringBallotBoxContent=Recovering ballot box content for tenant: {} and election event: {} and ballot box: {}.
BallotBoxContentService.getBallotBoxContent.ballotBoxContentFound=Ballot box content for tenant: {} and election event: {} and ballot box: {} found.
BallotBoxPasswordRepository.getByTenantEEIDObjectIdAlias.recoveringKeystorePassword=Recovering password for tenant: {} and election event: {} and ballot box: {}.
BallotBoxPasswordRepository.getByTenantEEIDObjectIdAlias.keystorePasswordFound=Password for tenant: {} and election event: {} and ballot box: {} found.
ConfirmationMessageValidationService.validate.start=Validating confirmation message.
ConfirmationMessageValidationService.validate.validationSuccess=Success validation of: {}. 
ConfirmationMessageValidationService.validate.validationFail=Fail validation of: {}.
ConfirmationMessageValidationService.validate.resultOfValidation=Validation confirmation message result is: {}.
VoteCastCodeRepositoryImpl.findAndWriteCastVotingCards.noResult=No result trying to find and write cast voting card for tenant: {} and and election event: {}.