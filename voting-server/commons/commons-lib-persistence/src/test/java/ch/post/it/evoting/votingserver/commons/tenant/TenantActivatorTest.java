/*
 * (c) Copyright 2021 Swiss Post Ltd.
 */
package ch.post.it.evoting.votingserver.commons.tenant;

import java.io.IOException;
import java.io.InputStream;
import java.security.PrivateKey;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.junit.BeforeClass;
import org.junit.ClassRule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.EnvironmentVariables;

import ch.post.it.evoting.cryptolib.api.exceptions.GeneralCryptoLibException;
import ch.post.it.evoting.cryptolib.certificates.bean.X509CertificateType;
import ch.post.it.evoting.cryptolib.extendedkeystore.cryptoapi.CryptoAPIExtendedKeyStore;
import ch.post.it.evoting.cryptolib.extendedkeystore.service.ExtendedKeyStoreService;
import ch.post.it.evoting.domain.election.model.tenant.TenantActivationData;
import ch.post.it.evoting.domain.election.model.tenant.TenantSystemKeys;
import ch.post.it.evoting.votingserver.commons.domain.model.tenant.TenantKeystoreEntity;
import ch.post.it.evoting.votingserver.commons.domain.model.tenant.TenantKeystoreRepository;

import mockit.Expectations;
import mockit.Mocked;
import mockit.NonStrictExpectations;

public class TenantActivatorTest {

	@ClassRule
	public static final EnvironmentVariables environmentVariables = new EnvironmentVariables();

	private TenantActivator _target;

	@BeforeClass
	public static void setUp() {
		environmentVariables.set("tenantpasswordsdirectory", "tenantpasswordsdirectory");
	}

	@Test
	public void testActivateUsingReceivedKeystore(
			@Mocked
			final TenantKeystoreRepository tenantKeystoreRepo,
			@Mocked
			final TenantSystemKeys tenantSysKeys,
			@Mocked
			final TenantActivatorTools tenantActivatorTools,
			@Mocked
			final ExtendedKeyStoreService keyStoreService,
			@Mocked
			final CryptoAPIExtendedKeyStore cryptoAPIExtendedKeyStore,
			@Mocked
					Map<String, PrivateKey> privateKeys,
			@Mocked
					Map<String, X509Certificate[]> certificateChains) throws IOException, GeneralCryptoLibException, CertificateException {

		String tenantID = "tenantID";
		String serviceName = "AU";
		String passwordAsString = "RBW6WD4IPTA73VT4KASLILIIFJ";
		char[] passwordAsCharArray = passwordAsString.toCharArray();
		String keystoreBase64 = "eyJzYWx0IjoieW1keFhMM3ZYRTZjWjhaczB6RmdYMk5XR1BnPSIsInN0b3JlIjoiTUlJU01nSUJBekNDRWV3R0NTcUdTSWIzRFFFSEFhQ0NFZDBFZ2hIWk1JSVIxVENDQlhJR0NTcUdTSWIzRFFFSEFhQ0NCV01FZ2dWZk1JSUZXekNDQlZjR0N5cUdTSWIzRFFFTUNnRUNvSUlFK2pDQ0JQWXdLQVlLS29aSWh2Y05BUXdCQXpBYUJCVEpCTUNoZTd2endjNjFORHZOaXdQME5RUS9tUUlDQkFBRWdnVElVOVQvb2tlbjR5YmhLREUvZGEwajY4UDNKcU85THRmVFZQVnczU2FReFBqWFVqeloxRTFEaTJFZ0VpaVl5UGpMMUFpY3ZueStLc1JDalZQL1BYUFRmRnVWOS9JbFh4VU83SG5QaFQ1cTV6RGQ2UGhiU1RrUXhwUnp3TGxBK3BQaC8vMHF5TndsdGJ1ZkRYbm5aN2VwK3JtYkQrS1pQUVB3R2VscitBRUFWTU9rS2JMYXViR3ZybEVGQ0dWSSt3K01ZWHh4dnBOSWZsQlg1TEh4cXltRFk3NzE1L3prS0ZuR01yN2wraGZrZUVzemtuSHdjU1JlN2RlSnFUM0RFNld4ZTJYak42Q1NHT05YWGJLMFBtSUpmdmZpTEExSTNsclQ4RjZVUk81OVlXVFhSOGpsSTFVQ3JYNEg2Y082MGxtQXRlZFBGR3lmTlRieVNXWm55c2daQ0pCY1ZBMFBlZzExYnRWbjk2b3dyb2dvVWtLWTh5REFtZkFjZzh5d3V5WWpsSTlreGFkSVVySE1LczZSTExITkJjaEh2VDd1WWJjR3oxd09kOGNKY3VuRGZaZHVlWkVZZlFCVDBZaTREbzlTRnUzaDdLcWxBMU9aWUpKSlFpVlJBaGpCT3hrRFdUdEludUl0VjNxRWpIc0lpRXBheUxBdk1USWp3ZUp2Z0U1U1YwREpkWFFsTE1COEE2MU52MG5MNmdObSt1QW8yNlM5ZVJZLzR5WXkyQXRCbm1mM2lERkNvMk14Q0l6Ky9tRTlCdk5PQXl2Z1dxSkc2TjdzaVNSaWxXVjVGc2tJU3I3TnMyNGhudnE2TDhyZ0RibW5HYk4vVUxpR3JYaGl0eTJWV0w2ZzBqUzl4UEFuRWw3TzVndlBTUmFIVHRCZzIvZjJFM3VRZnZJWHl5cndtOHNsTjZrZHpDTG1UODFsaHNDUE1hMVJXNktwcVo5dHY2aFNpYzhDdG9ydVpiK1Bwa2RTUDJsdE1CRHZDaWw0R1YxeExRUCt2RjE4VUJqLzU1OXZQcGNPOGtCK3lOU3R3SksxZzZ4aGpOWHF5bFJMRStSSlF0RzRaQThTbWdJaDUydXY5Y1pLTTN4K2hxblhvWnZ2WUp4c1lyM2s4OHJ4dVFBZUJ0SG5nQTVGbjlZMDhnSjBLSksyMDZONHR1SGZ2Um0vSXk4aEt1WXhiZTBuNXdtME9xa2hUSk5xRy9IS0FGZ0lLTVNackZXVXREd2k3WFRYZE40ZWJnOS9yOHphRGo1L0pKTmFrR0JtS1FmZnBsTUFZUjkrSWFDNU5ncCtOYkVpVWI0L1N1Z01HdWU3WU9iWm9ndC90Mzl5dWFtMlhDZDZ1NnM2SWR5ZGg2TGhRRjJweVEvZEdYc29xVnJ6MmtyamVoMmNJcGhsakdFUzVXbWZoV3FCd0RhN3pKWWMyOUl5Z2hTd01mQ3lOQVlQOVJLdjVtTm1pNEdqWC9SSVl1QjFUcWhkTFo5UjZidjJEcTJCeWhldnovN1BiZW15NVRjbEVCNENHNDVFditvbGloZkh0NEpUUGc0SjdydDc5QWZzdWxzczVOODBpTmFNNmUrU0FtSkpZMDJjTGJhYUp5NnlIUW1WUkh2QVNHTUxxS05nUTBSNTgwanVTYURhSHVUWmMwS00zR1doa0MzN3M3UkhkNkszRE0vL0U1MUpnREd5Rm5Vc1h5WlFhbFVnc2hwUVlpTTBWKzUxSDJVYkIrZC9UUXgwb2xwaXFIeHZLdXJlUGlMaU1SWFJyV0NSdTlOVGlOZ0FwL3VzcTdpZTRIMHVlWVROeVJTa2o5dnpJWTVDMldTRUtBcVRyQVJza3ZpM3hPZlVOa0NtTk50emtvb3pFbVZya3VTbGNTT1ZRd2JkeFpxekhJVXp0MVJuSzI0THEvTGl4ZklPVGRPUjdhcWtKaWkvRlFTYmU0SkNNUmVnS2ZsZHByK2xjVVNlUkNObkZkK3RtM1c0bWpwNCszTysybGIvc3dsaVFQUHozb0s2ME5vTTZtWVRnNEJLOXJVL0VybHZFZTFEcGtoaStaaTZsbTNHZ2RhYVM4VENqaVMzalZtV3oyM0hOQ1hDMFJYK1lJU0dJNGdiWW5oMWZIUnZOVWoyNk1Gb3h0ZVFIRVAvUjdEemwvcnNSSkN4ZnV3QlNKL2dyUkpsZmZ3aS96RVRNVW93SXdZSktvWklodmNOQVFrVU1SWWVGQUJ3QUhJQWFRQjJBR0VBZEFCbEFHc0FaUUI1TUNNR0NTcUdTSWIzRFFFSkZURVdCQlNrQ3hFSWliTUtOOG5LZTNDTmVPdnZ5eEpuQkRDQ0RGc0dDU3FHU0liM0RRRUhCcUNDREV3d2dneElBZ0VBTUlJTVFRWUpLb1pJaHZjTkFRY0JNQ2dHQ2lxR1NJYjNEUUVNQVFZd0dnUVVDR1dIUUdEd0pLK2lwZVYyMHdWem5ORGRVYjRDQWdRQWdJSU1DRXI3NEhLbXNTSFAxOStmejB3bzkwVkdETXY1NUF2WkRMYWx4K1RvQXQ0YUNvUVh0bHEvRDd3K3pZeHJGNmhBVVNGTEJOdTk1T21XL3MxQ1RGV0NnTDhzN0RhMFZ5U1JSeUtJNElLdGErN0U2TjhjaDdpTWs1Z3djYWJWN1JRM3hXa29JWjMwUGV3bTFVSTBiQUg3VTZLSDlBbHV4MkVqM3NwZkdDSXAvL1RDTjJJejhqdVJPSU9TZURoOE5qRU9iT0J5SFNYTGMzV0w4c1V5bmdKdXN1NGllSVZjUk1Ia2hGUUlDNkpWTWYvT3dveFRaM1ZYU0FzWkxHYXM1UTYyWWlVaDkxcGNnQmFIMHFTWEZTSE9UeVF2TXNYaVllS0JEVWJNQXo2eFV2SEVBVU1xaVZ1RlVOUVFpTDEwUXJMZUZ4KzQxaGhQWHp1M3YvVisxTXI5UG5aUG1aYUxyVFJkUUFwQ1pxNys0WGhUeG16QnYxc2s1eHBNM1Ivajd1VVQzaFM3ejk3czlmK2VVRWt0M0Fld2NSSHlmTXh6cDBIcSt0bzJGMUswaUdOenN1SmlmTWNpeXVLaWw3TXZGVUNSM0xWVjA3cmtXVk0wZDUxY1cwaEJrRHdrNmNRbCsyOHBEY0lyZWtzVDh6ZmpOMkpDWStpdjR3YkRFOXJtMTJHQlhwU2o3MitHR1plUlRJdUo1NEtSVWdLN3N1ZzdMam9kaVpKRjVOenBlcEwwZTUwK3BvaThsdzhKcnM5RFZJQ1B2MW9LeklKWVdKTHpMQlJQVUt3bTdZckJBZllWZ0lRN2IyOFRlV1hPbHpHU0RVSXNJOSs5WnNFSEg4clRqSUMwNHh4MDVoUTRnOHg1WFNKK3hIYXZ4RzQ4MG9ZQUVYaTVUT3NvVnZ5YUdBd2czRHA0V3g5MC90K0lYSEtzUXlRdGFxMlpHT29OWnlwYTJHdGt1djBqOHN4dnBKdlJVRElsMzdXSW1sakgvbEU0VGltOEE2Rjd1c1R0bWtkTUZLRWtsb1U3U3JxT2pCdzFTaTJDWlQ5c2VRenArTFpSejhZSDNNT1NxMzFWUFlpb0FmMkY2RnVmU244anhHcFJ6TTRQVEVvd1diaTVFdENpNlMvZ3hEUTRVejYyamJtQUJaRndrYzFIbmhUM20zR2xIbzkwdCt0b0lidUlZcEVJbE1SMTNOYlF6a0VHVmZObHc2Sko4OWw2dHpYb0szL1UvaDE4UXlSVnpNMnl0bWlLZ3k3bXUvOHV6WFNUc3JKVlRHbGc2T21lT2NTUm9wSWFZL0ttVXNYdVJhbTlGQnNTR2RLSmE5VFdLTDVTancwZ1Z1ZjE2NWRrT2Q3bkI4TVZKMnJpMVRkZFI4dHJIclpCK3FvZWljRWlDU09SeGU4d1hidWRLY0luVkJDZUdsOHhIcnZmVCsxMzY2WGZrMytFVUxpSW1tb0lDZ0s3S1VjSTlnanJSdWR4enJIaElxVXJFU1IvMHdSZG9iV3R5VjdwY3AzemU1eVNGOVpEL3F6cGlJSEtmUzVFYWVOVkt4elRScndZMExUMlBRMU5BMVNwU3U4TkFpZmp4blNxRm9uVmdKR2VtdEtPUGRyY3NVbzh1V3g4MFRId2tMMlhkUTkyV2tPaXYxL2xrazlQYk9qOUNPUlBnSllOQ3FPeXJJR1lxajNpZ1BPOEp1TU0rNVVKN3lKajNmSFdaRWg1VUV2ZGZWUGJBMFBGQnJaZjBudCtWS0grRkdacjZFbS9VaHBWdnl6WkFTYUFVSzU0WHFYcjlwYUpiUE1OZHlpVWR4VXRObzJmVXo4MC9Jc2xTcm5HeE1MUDhqYVI0UGVENVl6RStzcVRueWJ2WUduSklUdS83aFlVcld2UHA1NGpnaFJLbm5nQlFPRjE3em1ZMGhQZnVZcGJiMmx4SHNncGVPUVhZelIzMHIzdDFhZ1N1cHNYUjB6OTROdjlCbis2djdJbUJRM0UxdzdXUG1ybG5JVlFienROdU5vSmZ2WDBYYlg5QTM2ODNUU1FveEVWL3RpM0Y3ZjZmclI2MnZqZFgwaTA4L2hHYXNuNTNWV01NbnhqLytNaUd5SFU5TEFvdFYrQXpPblhtcE9RTFFXSHpmV0xJR3c1aVVUYll6WHpzSjYwZDhVc2lOcFRMUHBLcnIvcjAwWU1EZmVvbFJMYWRJd2ZyaVNuTEFUYXNRMllqdXJFNXNicWRicSs3RzFEYVRWRFp5cjc0U3pJNWMwWlhObkI2N3drUXVtblFPZHlPT0FCTE9OL0ZlUjVWcEtnU1dZTDkvbm5CVzRMd2djWHllRVN3WnJYdjdHUXE4MjFDMkh4V0JoREVESUxBUHlGbHZuMFJ0Wm5RU2FQOEtZMjlnd0NVamJtUWNKZmI1VkFIcVVneThTYVMzNUJjaFVtcG9vZWtQbkx3dXRkZXppTmRUTTExd24rRmhoenFHMmFWalJIOGFzTE9uWjRXY053aXZrdVl1WUdBK0xiRFdDUXB6VGZJWmFEd0Z4eFVWam1BdnBGMEl6cFg0TVBoRTNnVkxMcHArblhMbThiU3VVcWlwTTF2NHdrTkoxWTRnTjAzM0k3U0pDV0FVVDVydEJMMXFXOTA3T0hOMjNzSmFXclpQM09qRE9MaVo1T1hOZnF4ZHRRam96cTdoeXN0TkdyanRCbUJXNElyV2ZXTXBpMnliRnNkdEVnTlpWa1V4UXBNTm1PZTNlV2N6OWc5ais4WUtXYlN5Umh2Q3VsSm5TcjZSSmtRYnB1TmFaRDkzWXc1R0xDMXp4SCtHU0ZUQk11N1BHbE5jRTMrTVdRTytrazhCbGFrSFNSQVMvY2NNY0ZvQ0lSU0hxaVcvcEtRYzVWRzczOTJRVTQ4bmFOUUZ5Wi9vK01nS0t1UFdkZGh3MkJURUZMVTJDY0c5SVFqeWZ4UVFhRkdlTFVSUmtYUEgrV0l1NW5taTVoeDFka200YWNpTm1iQTZOK0Z1MjlqcXFjbVZIdFl6S2ZOWFZUemlCdXp2ZFVaSDVnVGJiSU9RaGdMRU1MUEtwaFYzc05POERDam5LdHdDZUpzSithMmE2MFREaWpZT2dJeXdVaWd1Nis1RXdZRmQrdzA0dDdjM09LQ0xOY0pya3IrbVpLYmovTFg5QVlTaVdwbjNnVEoxYVZQQllmR3AzMDlaN2pBYWM1WmJyNkRza0hzdUQyTFMrSnJnUnN4b1B4VXF0OG1Ja282STdqOHhmS0szd3BUUldacG5OQkRnNFdQWTBOeTQwb1ErdlhOT3NIWGZxZ2krait6L3ptMFBoK244eU9QYzBtNkhWdUtUc0tXQmlobHhsTElWWG43cEJ6bFJxMCtPYUhjMmQ2ODRmVjdoV3k5K0d5Zk81ZU53b3BmNGFmMURXcHBISlBxN0RxVWhGM1ZnZHNUOGdtSnM4RVc5dTFaVlhRbE5ITW5haGtqZ1h2eldyUTZuOUdvZ1JHamNnUzRhWDNwV1R3TlhVUG5OczVKam5LaCs1VW0rSi9oeTZaSGhicVEwUzU5Rkkrak9LZzVlV0thQ3I5TTNrNmd0NS8zT1doRXBiOU0wVk9LdGU4Z1lTanhQWHpjWmVZYUJZeGkzYUZ5LzBhOERJaWNSdDNGT0x4dzNzRWVoZ1ZERlhFNzFJc0RTQzIxWk5odjhFMUY2Rmp4K3NodmcvNlEzT2ZrV0pNMHQwdDdqaDM3Qm5LN0QzWUNRZ0VXSWVQb3ZrSnlBKzF0Q0hWMkJ3bmNjeVptRFU5U3dwU29PVGtEWTR4cWhIYjNEVnVlOExnUVc2L1BKdnRod2pNUk5GRDhvbXBRYjNHZE5ISkdZQU9ZQTIvNE5pMWJwUkJMeGhKVDcrRVJ2UlFmeS9KTTlVL3NjNWN4VDJXQTV5S3pyVXZ4M3pPQWZKSDl5ZVFpTm5nV1FBUXhWazdWaGZKQmJlUHk3OU1zV0d2OSt4VTZONVR4cVB4d0hHSUFZUkVNak8ybFpkRjY2dFZkNklPc0trelpCMW1EdzZKcVFMbkV0WmUwT1hUMm5VWmZWdFQ2SWFqR2E1azBrS04yU0wwM2tYdW04K2RQb0QyejVwUnpKVjN1UEhQWG1JVUdnNVY5VkdFS1M3QUdNMVhZTjBqM3lBMGZHTlhIWmpLbmRGTDdvalpMSTlBTUQ5TUpPSXJhRWdQdWFGZWtERDRmTmptaFNNRXJUd3M4NnZpZ3lHRStWRkJGRVRPTklOT0I3MVV5dC9obHFGdnVQM0FpNVFuK1JPNlAxUHdVR3VTV09UeUUzSVJGNDRpVHBib0o0OWlObStXSVRqZXd5dEZQclpFcTNjYXJDaXJTTEZqOGE1SXIxamc1dUtPcHB6NGo5K3Zsa2pEMjcvTlFGbll3U2hnMnRaQjc4VGJ0OUQ1dUNPRWh0MFJhTEdEL2w5OHliaEFlcG00MjJDT28xNkVJK1BPUjZiRkZBcU1xcDMyV3Z0OVVickNmTmE3Z0VXcXhUZFFxZkNWMVlxdjM5RTNyb1BWbzk2ZWQrNldkdHJOVk5wakpRQVA1eXZsNVdTaUF5eVY0Uk41RDNnQjY5MnRLTFRNUXk4TnFHL1RkalFSRGVhU1pQRStUNFo3dTV4VHppS0Q4SFVNWXhrTm0xYWE0Q3NaRk1URVUrZ1RzcGpCd2ZiYWNMTjhNVHEwSW9lQmVvMzRnWFJSeTJKc2huc2d0VkhwOE10ZW5FUXFVN0RZdWZTT21Gb1gxZkRkZzNxWDBwY1ZWZnhrNGZXWVJzQ0dRSXFuZk1HWU1pMHgwa2FmbWtvd01GOTZld2lHWndFRnN4YjlKc2E4eUh0VTlMTUVEZVRHaDg0WG5TbmdOSTlYRlpnTG5ldDFzbkRucDJRR1BkSXFxNCt1TVB1OE1OejJtS1RVWGl1S1BhbHV1c2ZVMkNnUHdzcUdOSXlweldWL1lxd1dwRnA1dTVtSXU4eHo5VlZ2cnR0aHFFVVEydUFLQm03TTl1eGlVMFVzU1Y5dnVaUE1heWY2WG52aGpvaWR6VzBXUzgxYWV3RUlaWi83bDA1QmFkMy8wTFVpR2ExTVVLRGpzaWtnQUNubTZONlVuN01Pek0rWkp6VGIrWXZGZnZZVkdIUlFDVHNkZGdURlByZHN0SmFDZGxQMXFYcGxwRUxXZTJOb1RnTlM4SEw4bmx3SlV0ZXlnU3NXNEpCM3dDNkhvWlVIekhkL3hFMmkrQzRwdnVMdHlFQ2lPL3VVaEQ5TVVqZDNTNCtnZVBvTUgzcWo0V0ZqeGpmeWtjbnluMklIcWIvdURDRVdHVnZpcUtQWEk4akJ2NzlqanZCeVFoTUpEaU81L25QSXdFZVo5cDVsRTAwSDkxT1ZzSEFaeDViOGRZSllxOUZXY1NocnN4S0RuRytYU0VkcHVFZHFPYjZOV0xUa0xibTFEdDVFSEJyb3BvQVV5ZXg2RTFPdmp4WWM2S1JOaFRsUFNmZFZFWTE2TUQwd0lUQUpCZ1VyRGdNQ0dnVUFCQlFzVUF4MjRqMFE0Znh0VDZmeXlBbCtuZHNWR0FRVXdhL0JoTkkwdFVQNTQwN01ybmF3TWJmeFBBRUNBZ1FBIn0=";

		_target = new TenantActivator(tenantKeystoreRepo, tenantSysKeys, serviceName);

		new Expectations() {
			{
				tenantActivatorTools.getPasswordFromFile((String) any, (String) any, (String) any);
				times = 1;
				result = passwordAsCharArray;

				keyStoreService.loadKeyStore((InputStream) any, passwordAsCharArray);
				times = 1;
				result = cryptoAPIExtendedKeyStore;

				tenantActivatorTools.getPrivateKeys(cryptoAPIExtendedKeyStore, passwordAsCharArray);
				times = 1;
				result = privateKeys;

				tenantSysKeys.setInitialized(tenantID, privateKeys);
				times = 1;

				tenantActivatorTools.getCertificateChains(cryptoAPIExtendedKeyStore);
				times = 1;
				result = certificateChains;

				tenantSysKeys.addCertificateChains(tenantID, certificateChains);
				times = 1;
			}
		};

		_target.activateUsingReceivedKeystore(tenantID, keystoreBase64);
	}

	@Test
	public void testActivateTenantsFromDbAndFiles(
			@Mocked
			final TenantKeystoreRepository tenantKeystoreRepo,
			@Mocked
			final TenantSystemKeys tenantSysKeys,
			@Mocked
			final TenantActivatorTools tenantActivatorTools) throws IOException {

		String serviceName = "AU";

		List<TenantActivationData> tenantDataList = new ArrayList<>();
		TenantActivationData tenantActivationData1 = new TenantActivationData();
		tenantActivationData1.setTenantID("tenantID1");
		TenantActivationData tenantActivationData2 = new TenantActivationData();
		tenantActivationData2.setTenantID("tenantID2");
		tenantDataList.add(tenantActivationData1);
		tenantDataList.add(tenantActivationData2);

		_target = new TenantActivator(tenantKeystoreRepo, tenantSysKeys, serviceName);

		new Expectations() {
			{

				tenantActivatorTools.getListTenantsFromPasswordFiles((String) any, serviceName);
				result = tenantDataList;
				times = 1;

				tenantKeystoreRepo.checkIfKeystoreExists("tenantID1", X509CertificateType.ENCRYPT.name());
				result = false;
				times = 1;

				tenantKeystoreRepo.checkIfKeystoreExists("tenantID2", X509CertificateType.ENCRYPT.name());
				result = false;
				times = 1;

				tenantActivatorTools.attemptToDeletePasswordsFiles((String) any, serviceName, (String) any);
				times = 2;
			}
		};

		_target.activateTenantsFromDbAndFiles();
	}

	@Test
	public void testActivateFromDB(
			@Mocked
			final TenantActivationData tenantActivationData,
			@Mocked
			final TenantKeystoreRepository tenantKeystoreRepo,
			@Mocked
			final TenantSystemKeys tenantSysKeys,
			@Mocked
			final TenantActivatorTools tenantActivatorTools,
			@Mocked
			final ExtendedKeyStoreService keyStoreService,
			@Mocked
			final CryptoAPIExtendedKeyStore cryptoAPIExtendedKeyStore,
			@Mocked
			final TenantKeystoreEntity tenantKeystoreEntity,
			@Mocked
					Map<String, X509Certificate[]> certificateChains) throws GeneralCryptoLibException, CertificateException {

		String tenantID = "tenantID";
		String serviceName = "AU";
		String passwordAsString = "RBW6WD4IPTA73VT4KASLILIIFJ";
		char[] passwordAsCharArray = passwordAsString.toCharArray();
		String keystoreBase64 = "";

		TenantActivationData tenantActivationData1 = new TenantActivationData();
		tenantActivationData1.setTenantID("tenantID1");
		tenantActivationData1.setSystemKeystorePassword("password");

		_target = new TenantActivator(tenantKeystoreRepo, tenantSysKeys, serviceName);

		new NonStrictExpectations() {
			{

				tenantActivationData.getTenantID();
				times = 1;
				result = tenantID;

				tenantActivationData.getSystemKeystorePassword();
				times = 1;
				result = passwordAsString;

				tenantKeystoreEntity.getKeystoreContent();
				times = 1;
				result = keystoreBase64;

				keyStoreService.loadKeyStore((InputStream) any, passwordAsCharArray);
				times = 1;
				result = cryptoAPIExtendedKeyStore;

				tenantActivatorTools.getCertificateChains(cryptoAPIExtendedKeyStore);
				times = 1;
				result = certificateChains;

				tenantSysKeys.addCertificateChains(tenantID, certificateChains);
				times = 1;
			}
		};

		_target.activateFromDB(tenantActivationData);
	}
}
