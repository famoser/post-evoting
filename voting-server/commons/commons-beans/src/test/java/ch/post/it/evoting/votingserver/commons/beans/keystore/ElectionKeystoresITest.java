/*
 * (c) Copyright 2021 Swiss Post Ltd.
 */
package ch.post.it.evoting.votingserver.commons.beans.keystore;

import static org.junit.Assert.assertEquals;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.security.KeyStore.PasswordProtection;
import java.security.PrivateKey;
import java.util.Base64;
import java.util.List;

import org.junit.BeforeClass;
import org.junit.Test;

import ch.post.it.evoting.cryptolib.api.exceptions.GeneralCryptoLibException;
import ch.post.it.evoting.cryptolib.api.extendedkeystore.KeyStoreService;
import ch.post.it.evoting.cryptolib.asymmetric.service.AsymmetricService;
import ch.post.it.evoting.cryptolib.extendedkeystore.cryptoapi.CryptoAPIExtendedKeyStore;
import ch.post.it.evoting.cryptolib.extendedkeystore.service.ExtendedKeyStoreService;
import ch.post.it.evoting.votingserver.commons.beans.utils.PasswordEncrypter;

/**
 * This IT tests that keystores and encrypted keystores passwords that are generated during configuration generation phase can be recovered using the
 * appropriate private key, that is held by appropriate services.
 * <p>
 * During the generation of the configuration, several keystores are generated. These keystores are used to protect private keys. To open a keystore a
 * password is required. The passwords for four of these keystores are encrypted using public keys (at the moment that the keystores are created, and
 * the password are never stored in cleartext). The services where those keystores are sent will possess the corresponding private key (need to
 * decrypt the password). Therefore, when the services need to access the private key (contained in one of the keystores) then they must first decrypt
 * the password of the keystore, and then extract the private key. This IT performs these steps.
 */
public class ElectionKeystoresITest {

	private static KeyStoreService extendedKeyStoreService;

	private static PasswordEncrypter passwordEncrypter;

	///////////////////////////////////////////////////////////
	//
	// Ballot box signer
	//
	///////////////////////////////////////////////////////////

	String ballotBoxSignerKeystore = "";

	String ballotBoxSignerKeystorePasswordEncrypted = "XuL3LKUWsaCPqUgMhtNkuEEDqxxL1gHbQgadBW5G1OyDMyIE5rINEn4Xz45XnStMDRNrPe0L41PjUZ1SWLbavuD41ogYsKMSxMvPWiPIzj+oZQQ2pjlmm+Vb/xeUrIuKVi4PG1eCMKff46JFZMEMqWOlr2WOpMccHjhCOMGXQIEGcTUkPnlJfOflJHPMEoLuscDyNgJmG0zNS6sKkKDrLM7JAKMtIGXjLBN5lsD3FFRpQTPsvDl5Q4SU7Fb810y1WNKVTLP+dooCzvC7FIf87ryGQUMEXxaYVsX0uLI38n4KgT8RknFY9XRyz6eMR2PWrZHKLwt88ZldkAy+v+Qws3FwoIsUtiQv8ODm9VB0oiILiY3kVMUxmPZCLwsQB72Pe3WLWPDL733At+pyeBMGt3GQspbZzg==";

	String systemTenantElectionInformationKeystore = "/keystore/100_EI.sks";

	String systemTenantElectionInformationKeystorePassword = "VJTFGCIEYGS2MR4IOAXPB2PMZ7";

	///////////////////////////////////////////////////////////
	//
	// Authentication token signer
	//
	///////////////////////////////////////////////////////////

	String authenticationTokenSignerKeystore = "";

	String authenticationTokenSignerKeystorePasswordEncrypted = "EsXpdgRtOGkxYAGBUU/GTFbQ6HoW1ySXKphO8zSe3O/Nw03ImQpFdcvVbEgVEyu/AwzwamaOuUNc87y6u7L8OBZ1k6u8+c9OUoQVczYprsHc9kvhdR1ASpDPofsD2taRdR04rQsgthSvja7efBDXrxHfVsocLoZKtXJe5Mmqylv7dUUPeEQOG3ENXAOKV8SFl2WQ00pyrjextjesmBmuscfvtaW6SXtrPGu0zv9vKqhJSOEN0ORFdqwWOXbvyIJtStvexFUnY8ZM2p/u7RnsKG2DgGAkHuWSltYyH/q8rC5rC6M/hOb2LUKshlnosf7Mp+koYKw4qFmB1DXdmw/9y9Utx+9sEy2enz5ALWKyP8U4JKO7PvimIiqTUgEXlqVwDNh9t6Wrv3kOXk6KIIhwgw64EIK5IQ==";

	String systemTenantAuthenticationKeystore = "/keystore/100_AU.sks";

	String systemTenantAuthenticationKeystorePassword = "RBW6WD4IPTA73VT4KASLILIIFJ";

	@BeforeClass
	public static void setUp() {
		AsymmetricService asymmetricService = new AsymmetricService();

		extendedKeyStoreService = new ExtendedKeyStoreService();

		passwordEncrypter = new PasswordEncrypter(asymmetricService);
	}

	@Test
	public void ballotBoxSignerIT() throws GeneralCryptoLibException {

		CryptoAPIExtendedKeyStore store = loadElectionEventKeystore(systemTenantElectionInformationKeystore,
				systemTenantElectionInformationKeystorePassword, ballotBoxSignerKeystorePasswordEncrypted, ballotBoxSignerKeystore);

		List<String> aliases = store.getPrivateKeyAliases();
		assertEquals(1, aliases.size());
		assertEquals("privatekey", aliases.get(0));
	}

	@Test
	public void authTokenSignerIT() throws GeneralCryptoLibException {

		CryptoAPIExtendedKeyStore store = loadElectionEventKeystore(systemTenantAuthenticationKeystore, systemTenantAuthenticationKeystorePassword,
				authenticationTokenSignerKeystorePasswordEncrypted, authenticationTokenSignerKeystore);

		List<String> aliases = store.getPrivateKeyAliases();
		assertEquals(1, aliases.size());
		assertEquals("privatekey", aliases.get(0));
	}

	private CryptoAPIExtendedKeyStore loadElectionEventKeystore(final String pathSystemTanantKeystore, final String systemTanantKeystorePassword,
			final String keystorePasswordEncrypted, final String keystore) throws GeneralCryptoLibException {

		CryptoAPIExtendedKeyStore tenantKeystore = new ExtendedKeyStoreService()
				.loadKeyStore(readKeystoreAsStream(pathSystemTanantKeystore), systemTanantKeystorePassword.toCharArray());

		char[] passwordAsCharArray = systemTanantKeystorePassword.toCharArray();
		String ALIAS = "encryptionkey";
		PrivateKey systemTenantPrivatekey = tenantKeystore.getPrivateKeyEntry(ALIAS, passwordAsCharArray);

		String keystorePasswordPlaintext = passwordEncrypter.decryptPassword(keystorePasswordEncrypted, systemTenantPrivatekey);

		byte[] keystoreAsBytes = Base64.getDecoder().decode(keystore.getBytes(StandardCharsets.UTF_8));

		InputStream inputStream = new ByteArrayInputStream(keystoreAsBytes);
		passwordAsCharArray = keystorePasswordPlaintext.toCharArray();
		PasswordProtection passwordProtection = new PasswordProtection(passwordAsCharArray);

		return extendedKeyStoreService.loadKeyStoreFromJSON(inputStream, passwordProtection);
	}

	private InputStream readKeystoreAsStream(final String path) {

		return getClass().getResourceAsStream(path);
	}
}
