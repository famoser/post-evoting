AuthenticationInformationRepoImpl.validateAuthToken=Validating authentication token for tenant: {}, electionEvent: {} and votingCard: {}.
AuthenticationInformationRepoImpl.getAuthToken=Getting authentication token for tenant: {}, electionEvent: {} and credential: {}.
AuthenticationInformationRepoImpl.getAuthToken.notFound=Voter information not found for tenant: {}, electionEvent: {} and credential: {}.
AuthenticationInformationRepoImpl.getAuthToken.found=AuthenticationToken has been properly generated: {} for tenant: {}, electionEvent: {} and credential: {}.
AuthenticationInformationRepoImpl.getAuthToken.challengeInformationFailed=Challenge information is not valid for tenant: {}, electionEvent: {} and credential: {}.
BallotBoxRepoImpl.getBallotBoxInfo=Getting ballot box information for tenant: {}, ballotBoxId: {}.
BallotBoxRepoImpl.getBallotBoxInfo.notFound=Ballot box information not found for tenant: {}, ballotBoxId: {}.
BallotBoxRepoImpl.getBallotBoxInfo.found=Ballot box information found for tenant: {}, ballotBoxId: {}.
BallotRepositoryImpl.findByTenantIdAndBallotId=Getting ballot for tenant: {}, ballotId: {}.
BallotRepositoryImpl.findByTenantIdAndBallotId.notFound=Ballot not found for tenant: {}, ballotId: {}.
BallotRepositoryImpl.findByTenantIdAndBallotId.found=Ballot found for tenant: {}, ballotId: {}.
CreadentialInformationRepoImpl.getAuthInfo=Getting authentication information for tenant: {}, electionEvent: {} and credential: {}.
CreadentialInformationRepoImpl.getAuthInfo.notFound=Authentication information not found for tenant: {}, electionEvent: {} and credential: {}.
CreadentialInformationRepoImpl.getAuthInfo.found=Authentication information found for tenant: {}, electionEvent: {} and credential: {}.
VerificationRepositoryImpl.findByTenantElectionEventVotingCard=Getting verification data for tenant: {}, electionEvent: {} and votingCard: {}.
VerificationRepositoryImpl.findByTenantElectionEventVotingCard.notFound=Verification data not found for tenant: {}, electionEvent: {} and votingCard: {}.
VerificationRepositoryImpl.findByTenantElectionEventVotingCard.found=Verification data found for tenant: {}, electionEvent: {} and votingCard: {}.
VerificationSetRepositoryImpl.findByTenantElectionEventVotingCardSet=Getting verification set data for tenant: {}, electionEvent: {} and votingCardSet: {}.
VerificationSetRepositoryImpl.findByTenantElectionEventVotingCardSet.notFound=Verification set data not found for tenant: {}, electionEvent: {} and votingCardSet: {}.
VerificationSetRepositoryImpl.findByTenantElectionEventVotingCardSet.found=Verification data set found for tenant: {}, electionEvent: {} and votingCardSet: {}.
VoteServiceImpl.validateAndSave.validatingVote=Validating vote for tenant: {} and ballot: {}.
VoteServiceImpl.validateAndSave.voteInvalid=Invalid vote for tenant: {} and ballot: {}.
VoteServiceImpl.validateAndSave.voteValid=Valid vote for tenant: {} and ballot: {}.
VoteServiceImpl.validateAndSave.voteSaved=Vote for tenant: {} and ballot: {} successfully saved in ballot box: {}.
VoteServiceImpl.validateAndSave.changeVotingCardStatus=Changing voting card state for tenant: {}, electionEvent: {} and votingCard: {}. State: {}.
VoteRepositoryImpl.validate.start=Validating vote for ballot: {}.
VoteRepositoryImpl.validate.ballotNotFound=It is not possible to validate the vote. Ballot not found: {}.
VoteRepositoryImpl.validate.result=Result of validation vote is {} for ballot: {}.
BallotTextRepositoryImpl.findByTenantIdElectionEventIdBallotId=Getting ballot texts for tenant: {}, election event: {} and ballotId: {}.
BallotTextRepositoryImpl.findByTenantIdElectionEventIdBallotId.notFound=Ballot not found for tenant: {}, election event: {} and ballotId: {}.
BallotTextRepositoryImpl.findByTenantIdElectionEventIdBallotId.found=Ballot found for tenant: {}, election event: {} and ballotId: {}.
VotingCardStateService.getVotingCardState.found=Voting card state found for tenant: {}, electionEvent: {} and votingCard: {}. State: {}.
VotingCardStateService.getVotingCardState.notFound=Voting card state not found for tenant: {}, electionEvent: {} and votingCard: {}.
VotingCardStateService.checkVotingCardState.checkingResult=Checking voting card state for tenant: {}, electionEvent: {} and votingCard: {}. State: {}. Result: {}.
VotingCardStateService.updateVotingCardState.updateState=Updating voting card state found for tenant: {}, electionEvent: {} and votingCard: {}. New state: {}.
ChoiceCodeRepositoryImpl.generateChoiceCodes.generatingChoiceCodes=Generating choice codes for tenant: {}, electionEvent: {} and verificationCard: {}.
ChoiceCodeRepositoryImpl.generateChoiceCodes.error=Error generating choice codes for tenant: {}, electionEvent: {} and verificationCard: {}. Status: {}.
ChoiceCodeRepositoryImpl.generateChoiceCodes.generated=Choice code successfully generated for tenant: {}, electionEvent: {} and verificationCard: {}.
