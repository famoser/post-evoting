VoterInformationRepositoryImpl.findByTenantIdElectionEventIdVotingCardId.findingVoterInformation=Finding voting information for tenant: {}, election event: {} and credential: {}.
VoterInformationRepositoryImpl.findByTenantIdElectionEventIdVotingCardId.voterInformationNotFound=Voting information for tenant: {}, election event: {} and credential: {} not found.
VoterInformationRepositoryImpl.findByTenantIdElectionEventIdVotingCardId.voterInformationFound=Voting information for tenant: {}, election event: {} and credential: {} found.
CredentialRepositoryImpl.findByTenantIdElectionEventIdVotingCardId.findingCredential=Finding credential for tenant: {}, election event: {} and credential: {}.
CredentialRepositoryImpl.findByTenantIdElectionEventIdVotingCardId.credentialNotFound=Credential for tenant: {}, election event: {} and credential: {} not found.
CredentialRepositoryImpl.findByTenantIdElectionEventIdVotingCardId.credentialFound=Credential for tenant: {}, election event: {} and credential: {} found.
AuthenticationTokenValidationService.validate.start=Starting validation of Authentication Token.
AuthenticationTokenValidationService.validate.validationSuccess=Authentication Token validation successfully for: {}.
AuthenticationTokenValidationService.validate.validationFail=Authentication Token validation fails for: {}.
AuthenticationTokenValidationService.validate.resultOfValidation=Result of Authentication Token validation: {}.
AuthenticationTokenValidationService.validate.validationError=Error trying to validate authentication token.
ChallengeInformationValidationService.validate.start=Starting validation of Challenge Information.
ChallengeInformationValidationService.validate.validationSuccess=Challenge Information validation successfully for: {}.
ChallengeInformationValidationService.validate.validationFail=Challenge Information validation fails for: {}.
ChallengeInformationValidationService.validate.resultOfValidation=Result of Challenge Information validation: {}.
ChallengeInformationExpirationTimeValidation.currentTimestamp=Current timestamp {}
ChallengeInformationExpirationTimeValidation.expirationTimestampValidationOK=Expiration time OK {}
ChallengeInformationExpirationTimeValidation.negativeDifferenceTimestamp=Difference of timestamps is negative
ChallengeInformationExpirationTimeValidation.negativeServerTimestamp=Server timestamp is negative
ChallengeInformationExpirationTimeValidation.serverTimestamp=Server timestamp {}
AuthenticationContentService.getAuthenticationContent.authContentFound=AuthenticationContent for tenant: {} and election event: {} found.
AuthenticationContentService.getAuthenticationContent.recoveringAuthContent=Recovering AuthenticationContent for tenant: {} and election event: {}.
ChallengeInformationSignatureValidation.execute.publicKeyOK=Public key obtained from certificate for tenant: {}, election event: {} and voting card: {}.
ChallengeInformationSignatureValidation.execute.verifyClientChallengeSignatureOK=Client challenge signature successfully verified.
ChallengeInformationSignatureValidation.execute.verifyServerChallengeSignatureOK=Result of server challenge signature verification: {}.
ChallengeInformationSignatureValidation.execute.verifyClientChallengeSignatureFailed=Client challenge signature verification fails.
AuthenticationTokenSignatureValidation.execute.errorValidatingSignature=Error validating signature of authentication token for tenant: {}, election event: {} and voting card: {}. Exception: {}
CertificateChainValidationService.validate.starting=Starting certificate chain validation.
CertificateChainValidationService.validate.cryptoError=Cryptography error: {}
CertificateChainValidationService.validate.semanticError=Semantic error: {}
CertificateChainValidationService.validate.syntaxError=Syntax error: {}
CertificateChainValidationService.validate.certNotFound=An error occurred getting auth certificates: {}
CertificateChainValidationService.validate.rootValidated=Certificate root chain validation: Result: {}.
CertificateChainValidationService.validate.certValidated=Certificate chain validation: Result: {}.
ChallengeInformationCredentialIdValidation.execute.credentialIdOK=Credential identifier is valid for for tenant: {}, election event: {}, credential: {}.
ChallengeInformationCredentialIdValidation.execute.credentialIdInvalid=Credential identifier is invalid for for tenant: {}, election event: {}, credential: {}, challenge contains credential: {}.
