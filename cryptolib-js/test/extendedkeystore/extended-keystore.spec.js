/*
 * (c) Original Developers indicated in attribution.txt, 2021. All Rights Reserved.
 */

/* jshint node:true, mocha: true, expr:true */
'use strict';

const { assert, expect } = require('chai');

const keyStore = require('../../src/extendedkeystore');
const cryptoPolicy = require('../../src/cryptopolicy');
const elGamal = require('../../src/elgamal');
const certificate = require('../../src/certificate');
const symmetric = require('../../src/symmetric');
const pbkdf = require('../../src/pbkdf');
const codec = require('../../src/codec');


const PASSWORD = '01234567890abcdefghijk';
const PRIVATE_KEY_1_ALIAS = 'user1';
const PRIVATE_KEY_2_ALIAS = 'user2';
const SECRET_KEY_1_ALIAS = 'symmetricalias1';
const SECRET_KEY_2_ALIAS = 'symmetricalias2';
const ELGAMAL_PRIVATE_KEY_1_ALIAS = 'elgamalprivatekeyalias1';
const ELGAMAL_PRIVATE_KEY_2_ALIAS = 'elgamalprivatekeyalias2';
const SUBJECT_COMMON_NAME = 'SecDev';

const EXTENDED_KEY_STORE = {
	'salt': 'AWnL9mtD1UoAQ58l+8GH9aHPlrDMgeMF8m+0wHyCPAI=',
	'secrets': {
		'symmetricalias1': '7mgsaxqwL1oBASLQ40bcP5btCcLF1kgo+382PsIeqkyw3JeQIYsEIdRuUxdmP/9lUqQj+2sxxlCk6XU=',
		'symmetricalias2': 'hF+vhbcCy0odpXrpPAohUKrnX3LP1sLv9t7QCaBgdStg8rvx55opMrV+l3+ywOwx6u3jKfhTbmL4tnM='
	},
	'store': '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' +
		'LJI5QICBAA='
};

const EXTENDED_KEY_STORE_WITH_ELGAMAL_KEYS = {
	'salt': '7Q951QtBynbVfljodmtQmg351nq/kmxcHfCwdrTUdng=',
	'egPrivKeys': {
		'elgamalprivatekeyalias1': 'HA5aI6+JCB1/AIeb70bcMetz+1AuY9zTh4GJAS2Xr9A1EN6N5qj9pLCwXneozTyuOi8mp0sHg1bZfWKuehBH+8kjYDlKzexbqmXiDhf2jw7mX99' +
			'1x0KVpeQ7oJJMGIPAv+Ff3lGHZxZYEdAy72Nttt5HZWkX7jPGI9ZeqT8aQhB3mNuGMhFnfMFMdEFGr9AVa8ZeXfLVpuVkGoHVj8mkN9PHUy+NLQc3dyh1ggfHNrUlYD21SOEp+' +
			'4GTNxVNjsMPiOhi7LTHabXfliq3KdVltpo2IAZ0uvlmIj2cxZC+qFXv1BNiypPYkPRYSCfthWjhkz8iUSJUek5ve5sewVAMFZc5cRXEesvP5AH7tRwmv+63Ht7ktv8W5SKCm+y' +
			'cVmqx3Tzo4NEEsxDqwBilTLhbcokANljO3iyR3HgVIrvwEJGMm79AfH8RYe5rhCUbLZ/KF+XCVm3TZ2ux0zWgynZi7d/1rzqae9nM5vBfdK6YMmT+AuEoXxKDzvV/9cqlRNg+E' +
			'WF+vpfIit203fSiSv8fF6WZ3TSSUQ/oR6I56i5PWO/MBT3iYz++iwSO1faKNG762p7OY7gnG0V/EICTVtXn2pg+p78beAISpNL/FNxntVKIdg2dAXwaRcSWb9V5/zrN8FTQgIK' +
			'EMzFI/lWZUT4N0R+S08gdYfRIkxc3Olp2vXUV/rt5b7oc6jhHJo4Z37m3FSm7LFsrmVvzh5PGA0/gFfWbuZyPngjqoPBNJFtbFI4dqG+H8hOzOg9/KAx41qNPuUGWjuVatr0nE' +
			'2OdWLxaOe8eQ4exykL4xsS/s2bkrmynXJTCVKm9mNudmMUfdWE7Y3PxWtx3TnQpHGqIb0VbQRJabTzwHyyYBTqAmxsLO20VoCagPDJscPJNcBvGgYyKcjzjjPo+aaAHSfHiqUd' +
			'OluN5+sVNfy6ifUkIh5VBeoH6+s3Xhj0xPLLIpFIz8RA3y5lB7l19mFjw/T+pyq8dCWlx3xD8XgY9K/kWxQF8ERvZ2Qu/zHySV8ybXB3TKXJsmZNeNyFFCSZs6uvw+XhupaG+L' +
			'uOO4+FWTD3PpCMkeGXGJa4zCsnkMu/Hgi4ZTVvOxO27BwZz08/x9y76dpQcE1nt0IB2KMNuwD82m9cO77meHBp/LgsMQmA9G/+5i/mW6oq9ZlxlsE4FoA7ElJR2X7V2DXMwDSQ' +
			'PSuOScUjZCfsd4hPHW7+Q/INzBmIbBqvlaE7yjJ6Rt23UbfKgjnNL8891KE9qgnlxAZ3M77YuQpMLKWTmYpQH3fcrBFv6QRV1aUaMhDL1Fjnzn6J/sbM4l0JysJrMigRmHy6I5' +
			'PWJDQTeuzEDtFAyd9E7sOv5/rdIBHvtQlUBy+4PTPPoGv+idkIKKZ04yglwGTWxtkKsAvt1CyQExj/q7Wghf1xWLoW3/hpoYqRtSOSIgQUpFEsjW2SY1kR/5EdudS66gfFbsAB' +
			'rNheNHSddXUIfB1QlqYBdIarUq1Np8rlZ0XywLxrVlqUmnLI9oXQbkvkq1NhD9XlbEYu+ROZFXZADytu9K4KInkqAZXz9HB/QBncTRmPRS6onM+kbjKLImtvlEJ6EJt2I46nIU' +
			'VM2d73MTPLNWaUNkuFq9u+oZ/Dn1ozgEoeqCJtHtMtl33FUu1Nsl6LtJ6bbKtNR6XlCgedbWtUX0Qli8RDw6sb/zrRZ9lBqNw/8Nfg5zn6CBdcqwRgVwNc48VJ+g6X35quwKFl' +
			'UyLEFi4DvUN46n1FbE09PACVJu2uYZ8AI3bF1jpPZbMVcPcQEHI0WhUCg9+HyoQrOl8X7h2uwnxxaClGujvT1INXLWwIosqg/73WvC+kl78lOC4cczc6lzuKZoWLAxpOZ8gpRx' +
			'WF+BT2mo63Ulr9aIhoeh9rTxecWyk2NVQ+tPm6WfMW7Uq21H5sLDFRKE1zkQJsMZiJDfqyY0osrCJsY/Y9wq/HrlEf/GTe9zrMEC1ZZheDqKO7zwdIs8iubKv6n+pSJSifjXjA' +
			'sv29HDpF/vycVy7HzlouloQEJFZqpXxTawVcOpf6/pwxuO3CbTtpAJFdsI2hf84/bV5ZhW+vAvIlGkINMr+oshNA4FKvDr1nC6bXAU9swfZoGyJUuvVm6vLlAL49JZGWpkfcrO' +
			'yaSFP15p4kPRfzv63hV57QPImx55QPfpbPUXQeW512TcZTsNX8UYNVNny2FSZXckQQaArkrLwqVmjKhNwrzEVc2WuAcbthcm8dsSpjsDSaJDmS2xVK7flmQTTou5xHJppWyUee' +
			'Y/bo/vBE6oG6v5QFzwDcnyPXXy7cZnUvEzk+IVNZCqMQ4ZNjMW4mMiR+TJKCQ4ro5QEqCWFkSGtOrerZTkthacwqS0UTVorFxrZEPZwKGsMSmMEA44KhcxN2jgiyc/Aed3oyEK' +
			'WbmtMcd8eaqiKEFCaU+v31/WL1vBi5zxEOCsJUPjbgcESlVzwSttE9RRVwoljMoZDoMDPEC3x9aOWz03bGn2Ky7XiLgPzAi2FN6EIWoPnqI1KylTdN51gSqv8P79CzhSQzROFp' +
			'B4AunA6K7qPCM4UYvuPReKmkNJzON5FnMBJTUWT6PNISXdKdbFIgdRkF0d7rwF1a3H13fXG4NginqYtzNoVpPfBHlXAWU8dKOyIb0tvTPeqAfUZ0iXTXsTuVmqSuhaPANWPYOu' +
			'FZwB84TvUhq+Azj4S1kJN1K0Fo3DwLaRYTcAkbZOEuNR33e8kRGsmfH7aU3JsKZJJBffY88CbY5fclNG7HUn59kI3L8Mxuvntb7KGed3VNqNxKaCwT7XJJcIo4XBl6xdzuwzla' +
			'Ssdsd30Ci6uFip2ootnemCNJwtgoVLXFJe0pJ+JVOU1LMcFJdWTf6fuwDndzI+RWFwcoc30FxmEBJ2fF/vBvlSqgtRpISAeq/y7auPFn7+GKJZspuIDJqkXdOKxCm2ChmiqZ0Z' +
			'PZRX6vU+zHxCN536eauE7IY1khuAOBZsxPweJg0RKm3+rB3fc4amlneTV/Pwc0CCLEFY1tVouaCe9GSzy1tzNCN8c5j5YVUWAjsgvXcmnzSAsQYvn1cjt+BPr3B+nnbx1oEJgi' +
			'1dmF8NXm7qCg0KGTPqc5+kKpJh/egtsbxBNVeb12MmFPXzrockM6+ZlyOSdHxdFYUxlFaBnEs8MHTOXgoCpU93U/3uu7l+Kqm+i4ErpGliyYqguvMizxAHk8jckmzoMkcztvFF' +
			'v18qlgG22Nz1BqwCobAc6DT7QQIlAQsQMY0d1QMlcxH35aTN5kS0/G2EDZ3ZG5AQEwQmczf4kNVWwk62XhTRcKcqdRRX/7h6OOMDc1nP5/GmcderDbaRFV28eFrzi4Mjjcjzpz' +
			'889ttmHXPN7D8AvbTtHqRm4ujAFAvYbhU5hguY7x7BP+OOB01jvOM/F1U7Zzgg12FQoaMvcacJECaMR1Alz22htPaK0VIxCmxZd+q/T1xAJYPNwver4QbKJX6Pg==',
		'elgamalprivatekeyalias2': 'vezAhuUI9Rqb9SNp9QXGpdiiKjJCGjK3MWmQbSC+NV+4HYEKKuCP6N9RuKAprssqmGYDWUc3ecYD6JsRlW2PNnbAv0oK/aGGogh3gqrVDLqBqSe' +
			't1hmnN3NImAmXscpioAAnfPd1RR4V2lv8+Lc3aUPKTvNwl1P3jATM3TViGzb0hxMhsCuUwFOX'
	},
	'store': 'MFUCAQMwEQYJKoZIhvcNAQcBoAQEAjAAMD0wITAJBgUrDgMCGgUABBR+zoG7NsLvE8zqUFX7HXeP/yK07gQUQaC4BDlbcjaPJxp4KTcJh9wSzMMCAgQA'
};

const EXTENDED_KEY_STORE_USING_DEFAULT_POLICY = {
	'salt': 'c8ql8xUVLFvwjZ1fREZOQP9qeFgFK+ZszcnXF1A8mJQ=',
	'secrets': {
		'symmetricalias1': 'n46rZix2cF+QXGn0TEoAr3d9uhi0J+gMCLXk6dozLARiNmWmnVqyu36ij0uGBrRp/bWtG6/0/ggEVHs=',
		'symmetricalias2': 'lOGAOikhtoGWEsQBoihiEbuUd3dQtUaunU9GydhVORrrpCeE2AOwXO6/ZaH5a7hFSVfaJvik4+debeJfia2MIHnkWKezWxchh5pO'
	},
	'egPrivKeys': {
		'elgamalprivatekeyalias1': 'wcvd7R41KEO/dTWA7lQ7yWDeELm0Qxpa17SfafJRNdWXEtUeg8Uq3NWOpZO/aegAqrtKWF2b1QYB2iQcL+NscLFwpS1aJkPJYTr+KWI5NpNSLLV' +
			'MS0VULbq+CtxyjXJ+qG6ePYdLuTsb9K5c3LXZiMprEn2s2Ly9EE1aHGz3iYjBk7ge0OwnAlp3KOUzC9id20Hw4x5SowhbbnM+d5oS6vz6NWjsRsWH/b9uafm8MpVIAB5C0rrJO' +
			'tnNTC+E7Ko3zSjbCYH8sI+JOhy357d8d3Cp+lM9C0ryL/Uhuz9jynfdpb2x0B7yE+FDzGaqwZrEi/Q0uWeM4p/00gGu+qnTgtimJlT6ITLvSIYEuarn2+js0YMa8G0gV8fbpa8' +
			'nM7iaN8gpM1Vd19o0u0eNlR/zh6u6ZEKgSzYKRUGCTCLhXx+Blw3BPlWHmH/TceASe3ifXY5zGTLRVRXD9MAKGptEogQ27kuN90sQL5RsoSp6uywCkDwO/rqteV1c8OO+NGEr5' +
			'BGm4NY7TEP4zxSnVVbDdWWisKq57G7PNwO/D8FYS0Zt9cSCJlc70a7Ak7EjIVfZrYQsc1zc984d77ZlBWSFQrRrucZmWi7ll/t+iCC6uiBRPhoM/pZccc0cbb5KmWP1ImchIc2' +
			'KzcuIWuFmigXvYdJ0/GZNm2mSoqgPDuHxNpMfyMA9Q2yRBXn47KEP5nQipdg+gyAG0ZhmTThEP4egaw4zelQ4HIiVBGbVhLoQnlDAkv4oSrfuUYFQOvPpUTCtdkozafpxzaFmS' +
			'sp5JynK9fiO2/zikRHyAZhxZELB2bYELffwF8blxoX3TSH3zHCyLXcEgYags6rUsGv2jDwCp2hD3r5H3b0xaQm3rt0xhobba26N/nQ5ziCIQytro3gT09j913tcHE0kuDAkQn9' +
			'mrFnoLGeNJu/QBqKiJWmsMlReZI/ScPjQ5URsWYfrgn+mXXrt5VyNjU48u4+l2jtJoRc9aDnu16ctF+1RVwstrGFJewd8FiSYaTdJJTul6/D0ChR/N5fVPIEJHTm+fPz7Whi5M' +
			'7kFEcZZKWHoj/FBse7Z7OsNePY9YdXAcOjvWALrFPCarW6a8UEtzBm+CdrOpvLjpxAiXyGP3dY6x/ocP6zcPBDq/UFEeI4yDX+EVH65cTGqRPAe2nyWws9Jw1jhW/f8V0kc+aU' +
			'1gjEXUuqXpQgvKle9h56QU566+JEumP99YM5EDxInAHR0GNznutY/nTeiU+chXEE8ZItmXq2lnsMdzIVOuR+7zZSXrwxP0O+/wy7ga9v6DWMjSchXnWSSbtqkxBXXxpCwqsiS6' +
			'6npRKGSjOfpxyI636bnl9DlK5XIK9vDXHSP8kMBbVu2lpYZWmftRGJK+Ft8EotcgkyBvy6Yz3WFGqRUeaN0+EZKOBuIQSYe3PL9o6KX7JyP6awWLbvapugswsjVG6ejHoF0s4A' +
			'NlqZKeHlwZ2DezFZGBeupO09FtntTU4MMyxj09ssGkix9+sQLqkU=',
		'elgamalprivatekeyalias2': 'TYXX+StgOKogu0IkdIfbVc4PG/qIo0/ci5bwBhwltdSGrG+TOC/0yGMPx0Az7/hWUJCnBVVHk8le55F1D2sebmhudZniOvcGh6MTejCkJ/oWYWR' +
			'+39Z488oFPJiCrEsNH6jWOcdAZIRUUYiFlVBe5sKWfbRTUqYNRX27ykGTd0MBDxNBHIMVg+lTZjlBDh6JJ+4NZHW2lx1fKra5QRIrMCcDPVQ59PDZ5ogdtxmHKHy1gQ3dPMbZH' +
			'ZO1fbD/je0HT9/WXySpsAEOGo60yZX5uJqTV1N/lNbuuGBKTqyib1OHUfMl/ER/PZKDD2fOqAT2qeawrHB4I0wurQTplqgqbLljFilPf8iL5ytBPUfki361jg4GeGfALiTfTSc' +
			'y4OxScCQZSJXz4sPz9ZcZWCE7p0Cz9tqPSWWhbex4T/R7taHG1Q/twqeGLLupR0TQl9fbTbg0/dA1bp+mtx7p0+ZmS4B+dPA6GtgL0j5rvtH4FQSZyEe/e9YC16qWjElo7gVTi' +
			'KDHbi5T7OqGYVzWSU33gl4Z+1Wwcntk/gyYxOZBXtIFVT1qtwMfa68bXX7pfIISFQB40J6GEBHXOTAl1H720R8NBLsS4YgxvO8iiX8VX2vkH1ubHRSUPF8ySc+VZLyTOXLcVfy' +
			'Lj+/d+ZImcDMUr5FRK5f7CNl4tHc3XInuAxl3VFa/5xn8xsAKPT4pZ1BlZ1SAN1E5IjbmddNU7nLHYtnpcqiIxXZbwMxGySNrsQ1x90AIUv3n+0i44thqwP6+mXaQEeCAppM9J' +
			'46Im5A1xBlKNAztyTiavOgu4le6DYZpAH+QK30cDXJzokRTzKKDzgYxUmTmenH57rLdJHQiReSaiymgsQJ1JYz8dEY4Y+ofrOvuKngdMxBVcAVC8JvGpAskHkFSnHohe9hv+6O' +
			'rV+GIEBkmwce808xeNrXtgkD6CB4LepOx3uni/FVcqUeVRHgi9enw1JbkQpLIQqKtL3fNpEj4gClgRC8eiyXjLpUxxZ5+hqYXZ/HgwZncYY6MTQnnM6lmHdTcZC8o/UUFb22Za' +
			'kTtAFS51DyaYoJQ08/qeAn7CN4DUzzUQ62jpCYzXAuWcjHm80BkWHIm+XLb/YGM55WLVRr5sXTZFO1sggx1C8/aK4492zatvPUyWs2WYnCqhK63Y6AZEggy+G/J+IOGuky52Eo' +
			'wtzm5hcrFrtBLIvUMdHFLjyXKgT/cb6dNJ2RJYJigk+CTX4EeJ7B3dyvIKX14gEqVFXjrPS0bWCp/EpZk5vYtNE3RKNYGPmTBLP3+2EMU6pXntTvRNXf2RTIevX9w0qB6/6c5y' +
			'mLU97QtCV4WcckNHu8gL8/oFhqCI7Cb9DQ6ia7IsPUYF3PgWX2I7GAx2bN1ui0QO0D8i//p9a9EAYEyK9JxInJ8iyVsljBBdbW/9kQ6mBhO9oYx/iPRufmoT0NRIjNWt0QKicf' +
			'rvHtt9Z1DBt9KkmFppN9U2Sz820u6wU2e23JTP9hOtPV8m3OInGc='
	},
	'store': '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'
};

const ELGAMAL_PRIVATE_KEY_P_B64 = '258787925666708420998421377164228664662529910288157731390284516795153646796249235813586626556892892057664419802395' +
	'4882373780695439701941120224412193575245674938176956503167038791486393557789611642565484930659818550799573789250983961694449607370744533880610' +
	'1425467388977937489020456783676102620561970644684015868766028080049372849872115052208214439472603355483095640041515460851475971118272125133224' +
	'0079496884436804296680913134741188750816207469199075676823982090443436521473286228668346008398781142850188184631102271116140326714420854658439' +
	'40709084719667865761125514800243342061732684028802646193202210299179139410607';
const ELGAMAL_PRIVATE_KEY_Q_B64 = '129393962833354210499210688582114332331264955144078865695142258397576823398124617906793313278446446028832209901197' +
	'7441186890347719850970560112206096787622837469088478251583519395743196778894805821282742465329909275399786894625491980847224803685372266940305' +
	'0712733694488968744510228391838051310280985322342007934383014040024686424936057526104107219736301677741547820020757730425737985559136062566612' +
	'0039748442218402148340456567370594375408103734599537838411991045221718260736643114334173004199390571425094092315551135558070163357210427329219' +
	'70354542359833932880562757400121671030866342014401323096601105149589569705303';
const ELGAMAL_PRIVATE_KEY_G_B64 = '233379930657845502288121107205526523051782664773926335888849006957066155235539773685168775219402285848655731446216' +
	'3257545608603544011891370789571610936664154174680840991717947829295213927339653106002172998547312136859057411022087014982249515151970621039956' +
	'9901298027813383104891697930149341258267962490850297875794622068418425473578455187344232698462829084010585324877420343904740081787639502967515' +
	'6316870688695456652946975837501849110255147128711938372464838939505010157556834155090198639760716493259686236175682198647443897095630879493890' +
	'80252971419711636380986100047871404548371112472694814597772988558887480308242';
const ELGAMAL_PRIVATE_KEY_EXPONENT_B64 = '48592594473205926688195689626699612465610518652128745406812434243678013947743937257348292500159414952155587' +
	'7101972890893913200205523781485365001073449677195558104826069970714762096712484199560846022654739585730413408940547356888947141985810651260389' +
	'5297560717994246768950866491384823569118637582497519403351819609184883390558852906911976387433283350856334618005481106148226480670760580586739' +
	'9768145862238834288472095327779656662205292650351578167127327438952401030237797848277272866102060459242972842587487574614711252600958950297121' +
	'93814187300268672295894546694634423997510695194818714918502470470193799175083856878';

let _policy;
let _keyStoreService;
let _extendedKeyStore;
let _certificateService;
let _policyForElGamal;
let _extendedKeyStoreWithElGamalKeys;
let _elGamalPrivateKeyP;
let _elGamalPrivateKeyQ;
let _elGamalPrivateKeyG;
let _elGamalPrivateKeyExponent;

function beforeEachFunction() {
    _policy = cryptoPolicy.newInstance();
    _policy.symmetric.secretKey.encryption.lengthBytes = 32;
    _policy.primitives.keyDerivation.pbkdf.keyLengthBytes = 16;
    _policy.primitives.keyDerivation.pbkdf.minSaltLengthBytes = 20;
    _policy.primitives.keyDerivation.pbkdf.hashAlgorithm = 'SHA256';
    _policy.primitives.keyDerivation.pbkdf.numIterations = 1;

    _keyStoreService = keyStore.newService({policy: _policy});
    _extendedKeyStore = _keyStoreService.newExtendedKeyStore(EXTENDED_KEY_STORE, PASSWORD);

    _certificateService = certificate.newService();

    _policyForElGamal = cryptoPolicy.newInstance();
    _policyForElGamal.symmetric.secretKey.encryption.lengthBytes = 32;
    _policyForElGamal.primitives.keyDerivation.pbkdf.keyLengthBytes = 16;
    _policyForElGamal.primitives.keyDerivation.pbkdf.minSaltLengthBytes = 32;
    _policyForElGamal.primitives.keyDerivation.pbkdf.hashAlgorithm = 'SHA256';
    _policyForElGamal.primitives.keyDerivation.pbkdf.numIterations = 32000;

	const keyStoreService = keyStore.newService({policy: _policyForElGamal});
	_extendedKeyStoreWithElGamalKeys = keyStoreService.newExtendedKeyStore(EXTENDED_KEY_STORE_WITH_ELGAMAL_KEYS, PASSWORD);

    _elGamalPrivateKeyP = codec.bytesToBigInteger(codec.base64Decode(ELGAMAL_PRIVATE_KEY_P_B64));
    _elGamalPrivateKeyQ = codec.bytesToBigInteger(codec.base64Decode(ELGAMAL_PRIVATE_KEY_Q_B64));
    _elGamalPrivateKeyG = codec.bytesToBigInteger(codec.base64Decode(ELGAMAL_PRIVATE_KEY_G_B64));
    _elGamalPrivateKeyExponent = codec.bytesToBigInteger(codec.base64Decode(ELGAMAL_PRIVATE_KEY_EXPONENT_B64));
}

describe('The key store module that should be able to ...', function () {

    beforeEach(function () {
        beforeEachFunction();
    });

    describe('create a key store service that should be able to ..', function () {
        describe('load a Extended key store that should be able to', function () {
            it('retrieve one or more private keys', function () {
				const privateKey1Pem = _extendedKeyStore.getPrivateKey(PRIVATE_KEY_1_ALIAS, PASSWORD);
				assert.isDefined(privateKey1Pem);

				const privateKey2Pem = _extendedKeyStore.getPrivateKey(PRIVATE_KEY_2_ALIAS, PASSWORD);
				assert.isDefined(privateKey2Pem);
            });

            it('retrieve a private key, using a specified PBKDF service object',
                function () {
					const keyStoreService = keyStore.newService({
						policy: _policy,
						pbkdfService: pbkdf.newService({policy: _policy})
					});
					const extendedKeyStore = keyStoreService.newExtendedKeyStore(EXTENDED_KEY_STORE, PASSWORD);

					const privateKey1Pem = extendedKeyStore.getPrivateKey(PRIVATE_KEY_1_ALIAS, PASSWORD);
					assert.isDefined(privateKey1Pem);
                });

            it('retrieve one or more certificates', function () {
				const certificate1Pem = _extendedKeyStore.getCertificate(PRIVATE_KEY_1_ALIAS);
				assert.isDefined(certificate1Pem);

				const certificate2Pem = _extendedKeyStore.getCertificate(PRIVATE_KEY_2_ALIAS);
				assert.isDefined(certificate2Pem);
            });

            it('retrieve a certificate by subject', function () {
				const certificatePem = _extendedKeyStore.getCertificateBySubject(SUBJECT_COMMON_NAME);
				assert.isDefined(certificatePem);

                const certificate = _certificateService.newX509Certificate(certificatePem);
                expect(certificate.subjectCommonName).to.equal('SecDev');
                expect(certificate.issuerCommonName).to.equal('SecDev');
                expect(certificate.serialNumber).to.equal('00c1887963721a9214');
                expect(certificate.verify(certificatePem)).to.equal(true);
            });

            it('retrieve one or more certificate chains', function () {
				const certificateChain1 = _extendedKeyStore.getCertificateChain(PRIVATE_KEY_1_ALIAS);
				assert.isDefined(certificateChain1);
                expect(certificateChain1.length).to.equal(3);

				const certificateChain2 = _extendedKeyStore.getCertificateChain(PRIVATE_KEY_2_ALIAS);
				assert.isDefined(certificateChain2);
                expect(certificateChain2.length).to.equal(4);

				const rootCertificate = _certificateService.newX509Certificate(certificateChain1[2]);
				const intermediateCertificate = _certificateService.newX509Certificate(certificateChain1[1]);
				const leafCertificate = _certificateService.newX509Certificate(certificateChain1[0]);

				expect(rootCertificate.subjectCommonName).to.equal('SecDev');
                expect(intermediateCertificate.subjectCommonName).to.equal('SecQA');
                expect(leafCertificate.subjectCommonName).to.equal('SecEndEntity');

                expect(rootCertificate.verify(certificateChain1[2])).to.equal(true);
                expect(rootCertificate.verify(certificateChain1[1])).to.equal(true);
                expect(intermediateCertificate.verify(certificateChain1[0])).to.equal(true);
            });

            it('retrieve one or more secret keys', function () {
				const secretKey1 = _extendedKeyStore.getSecretKey(SECRET_KEY_1_ALIAS, PASSWORD);
				assert.isDefined(secretKey1);
                expect(secretKey1.length).to.equal(16);

				const secretKey2 = _extendedKeyStore.getSecretKey(SECRET_KEY_2_ALIAS, PASSWORD);
				assert.isDefined(secretKey2);
                expect(secretKey2.length).to.equal(16);
            });

            it('retrieve a secret key, using a specified symmetric cryptography service object',
                function () {
					const keyStoreService = keyStore.newService({
						policy: _policy,
						symmetricCryptographyService:
							symmetric.newService({policy: _policy})
					});
					const extendedKeyStore = keyStoreService.newExtendedKeyStore(EXTENDED_KEY_STORE, PASSWORD);

					const secretKey1 = extendedKeyStore.getSecretKey(SECRET_KEY_1_ALIAS, PASSWORD);
					assert.isDefined(secretKey1);
                    expect(secretKey1.length).to.equal(16);
                });

            it('retrieve one or more ElGamal private keys', function () {
				const elGamalPrivateKey1 = _extendedKeyStoreWithElGamalKeys.getElGamalPrivateKey(ELGAMAL_PRIVATE_KEY_1_ALIAS, PASSWORD);
				assert.isDefined(elGamalPrivateKey1);

				const elGamalPrivateKey2 = _extendedKeyStoreWithElGamalKeys.getElGamalPrivateKey(ELGAMAL_PRIVATE_KEY_2_ALIAS, PASSWORD);
				assert.isDefined(elGamalPrivateKey2);

				const group = elGamalPrivateKey1.group;
				expect(group.p.toString()).to.equal(_elGamalPrivateKeyP.toString());
                expect(group.q.toString()).to.equal(_elGamalPrivateKeyQ.toString());
                expect(group.generator.value.toString()).to.equal(_elGamalPrivateKeyG.toString());
				const exponents = elGamalPrivateKey1.exponents;
				expect(exponents.length).to.equal(1);
                expect(exponents[0].value.toString()).to.equal(_elGamalPrivateKeyExponent.toString());
            });

            it('retrieve an ElGamal private key, using a specified ElGamal service object',
                function () {
					const keyStoreService = keyStore.newService({
						policy: _policyForElGamal,
						elGamalService: elGamal.newService()
					});
					const extendedKeyStoreWithElGamalKeys = keyStoreService.newExtendedKeyStore(EXTENDED_KEY_STORE_WITH_ELGAMAL_KEYS, PASSWORD);

					const elGamalPrivateKey1 = extendedKeyStoreWithElGamalKeys.getElGamalPrivateKey(ELGAMAL_PRIVATE_KEY_1_ALIAS, PASSWORD);
					assert.isDefined(elGamalPrivateKey1);
                });
        });

        it('load a Extended key store, in JSON format', function () {
			const extendedKeyStore = _keyStoreService.newExtendedKeyStore(JSON.stringify(EXTENDED_KEY_STORE), PASSWORD);
			assert.isDefined(extendedKeyStore);

            // Check private keys.
			const privateKey1Pem = _extendedKeyStore.getPrivateKey(PRIVATE_KEY_1_ALIAS, PASSWORD);
			assert.isDefined(privateKey1Pem);
			const privateKey2Pem = _extendedKeyStore.getPrivateKey(PRIVATE_KEY_2_ALIAS, PASSWORD);
			assert.isDefined(privateKey2Pem);

            // Check certificates.
			const certificate1Pem = _extendedKeyStore.getCertificate(PRIVATE_KEY_1_ALIAS);
			assert.isDefined(certificate1Pem);
			const certificate2Pem = _extendedKeyStore.getCertificate(PRIVATE_KEY_2_ALIAS);
			assert.isDefined(certificate2Pem);

            // Check secret keys.
			const secretKey1 = _extendedKeyStore.getSecretKey(SECRET_KEY_1_ALIAS, PASSWORD);
			assert.isDefined(secretKey1);
            expect(secretKey1.length).to.equal(16);
			const secretKey2 = _extendedKeyStore.getSecretKey(SECRET_KEY_2_ALIAS, PASSWORD);
			assert.isDefined(secretKey2);
            expect(secretKey2.length).to.equal(16);

			const keyStoreService = keyStore.newService({policy: _policyForElGamal});
			const extendedKeyStoreWithElGamalKeys = keyStoreService.newExtendedKeyStore(
				JSON.stringify(EXTENDED_KEY_STORE_WITH_ELGAMAL_KEYS), PASSWORD
			);
			assert.isDefined(extendedKeyStoreWithElGamalKeys);

            // Check ElGamal keys.
			const elGamalPrivateKey1 = extendedKeyStoreWithElGamalKeys.getElGamalPrivateKey(ELGAMAL_PRIVATE_KEY_1_ALIAS, PASSWORD);
			assert.isDefined(elGamalPrivateKey1);
			const elGamalPrivateKey2 = extendedKeyStoreWithElGamalKeys.getElGamalPrivateKey(ELGAMAL_PRIVATE_KEY_2_ALIAS, PASSWORD);
			assert.isDefined(elGamalPrivateKey2);
        });

        it('load a Extended key store that was generated using the default cryptographic policy',
            function () {
                // Create new Extended key store service object, using default policy.
				const keyStoreService = keyStore.newService();

				// Open Extended key store that was generated using default policy.
				const extendedKeyStore = keyStoreService.newExtendedKeyStore(EXTENDED_KEY_STORE_USING_DEFAULT_POLICY, PASSWORD);
				assert.isDefined(extendedKeyStore);

                // Check private keys.
				const privateKey1Pem = extendedKeyStore.getPrivateKey(PRIVATE_KEY_1_ALIAS, PASSWORD);
				assert.isDefined(privateKey1Pem);
				const privateKey2Pem = extendedKeyStore.getPrivateKey(PRIVATE_KEY_2_ALIAS, PASSWORD);
				assert.isDefined(privateKey2Pem);

                // Check certificates.
				const certificate1Pem = extendedKeyStore.getCertificate(PRIVATE_KEY_1_ALIAS);
				assert.isDefined(certificate1Pem);
				const certificate2Pem = extendedKeyStore.getCertificate(PRIVATE_KEY_2_ALIAS);
				assert.isDefined(certificate2Pem);

                // Check secret keys.
				const secretKey1 = _extendedKeyStore.getSecretKey(SECRET_KEY_1_ALIAS, PASSWORD);
				assert.isDefined(secretKey1);
				const secretKey2 = _extendedKeyStore.getSecretKey(SECRET_KEY_2_ALIAS, PASSWORD);
				assert.isDefined(secretKey2);

                // Check ElGamal keys.
				const elGamalPrivateKey1 = extendedKeyStore.getElGamalPrivateKey(ELGAMAL_PRIVATE_KEY_1_ALIAS, PASSWORD);
				assert.isDefined(elGamalPrivateKey1);
				const elGamalPrivateKey2 = extendedKeyStore.getElGamalPrivateKey(ELGAMAL_PRIVATE_KEY_2_ALIAS, PASSWORD);
				assert.isDefined(elGamalPrivateKey2);
            });
    });
});
