//
// Grid system - rtl case
// --------------------------------------------------


// mixin variations


.float-grid-columns-rtl(@class) {
  .col(@index) when (@index = 1) { // initial
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general
    @item: ~'[dir="rtl"] .col-@{class}-@{index}';
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      float: right;
    }
  }
  .col(1); // kickstart it
}


.calc-grid-column-rtl(@index, @class, @type) when (@type = push) {
  .col-@{class}-push-@{index} {
    right: percentage((@index / @grid-columns));
    left: auto;
  }
}

.calc-grid-column-rtl(@index, @class, @type) when (@type = pull) {
  .col-@{class}-pull-@{index} {
    left: percentage((@index / @grid-columns));
    right: auto;
  }
}

.calc-grid-column-rtl(@index, @class, @type) when (@type = offset) {
  .col-@{class}-offset-@{index} {
    margin-right: percentage((@index / @grid-columns));
    margin-left: 0;
  }
}

// Basic looping in LESS
.loop-grid-columns-rtl(@index, @class, @type) when (@index >= 0) {
  .calc-grid-column-rtl(@index, @class, @type);
  // next iteration
  .loop-grid-columns-rtl((@index - 1), @class, @type);
}

// Create grid for specific class
.make-grid-rtl(@class) {
  .float-grid-columns-rtl(@class);
  .loop-grid-columns(@grid-columns, @class, width);
  .loop-grid-columns-rtl(@grid-columns, @class, pull);
  .loop-grid-columns-rtl(@grid-columns, @class, push);
  .loop-grid-columns-rtl(@grid-columns, @class, offset);
}


[dir="rtl"] {
  // Extra small grid
  //
  // Columns, offsets, pushes, and pulls for extra small devices like
  // smartphones.

  .make-grid-rtl(xs);


  // Small grid
  //
  // Columns, offsets, pushes, and pulls for the small device range, from phones
  // to tablets.

  @media (min-width: @screen-sm-min) {
    .make-grid-rtl(sm);
  }


  // Medium grid
  //
  // Columns, offsets, pushes, and pulls for the desktop device range.

  @media (min-width: @screen-md-min) {
    .make-grid-rtl(md);
  }


  // Large grid
  //
  // Columns, offsets, pushes, and pulls for the large desktop device range.

  @media (min-width: @screen-lg-min) {
    .make-grid-rtl(lg);
  }

  // Custom row
  .w-row > [class^="w-"] {
    float: right;
  }
}