# File configuring the cryptolib policies
## Release ${project.version}
##===========
## Primitives
##===========
# Key defines: algorithm - provider for UNIX systems
# Options: [NATIVE_PRNG_SUN]
primitives.securerandom.unix=NATIVE_PRNG_SUN
# Key defines: algorithm - provider for WINDOWS systems
# Options: [PRNG_SUN_MSCAPI]
primitives.securerandom.windows=PRNG_SUN_MSCAPI
# Key defines: algorithm - hash - provider
# Options: [ MGF1_SHA256_BC | MGF1_SHA256_DEFAULT]
primitives.kdfderivation=MGF1_SHA256_BC
# Key defines: algorithm - iterations - hash - salt bit length - provider - key bit length
# Options: [ PBKDF2_32000_SHA256_256_SUNJCE_KL128 | PBKDF2_32000_SHA256_256_BC_KL128]
# NOTE: PBKDF2_32000_SHA256_256_SUNJCE_KL128 is supported since JCE 1.8
primitives.pbkdfderivation=PBKDF2_32000_SHA256_256_BC_KL128
# Key defines: password minimum length
primitives.pbkdfderivation.minpasswordlength=16
# Key defines: password minimum length
primitives.pbkdfderivation.maxpasswordlength=1000
# Key defines: algorithm - provider for UNIX systems
# Options: [NATIVE_PRNG_SUN]
primitives.pbkdfderivation.securerandom.unix=NATIVE_PRNG_SUN
# Key defines: algorithm - provider for WINDOWS systems
# Options: [PRNG_SUN_MSCAPI]
primitives.pbkdfderivation.securerandom.windows=PRNG_SUN_MSCAPI
# Key defines: algorithm - provider
# Options:
# - SHA256_SUN
# - SHA256_BC
# - SHA256_DEFAULT
# - SHA512_224_BC
# - SHA512_224_DEFAULT
# - SHA3_256_BC
# - SHA3_384_BC
# - SHA3_512_BC
primitives.messagedigest=SHA256_SUN
##==========
## Symmetric
##==========
# Key defines: algorithm - key size - provider
# Options: [AES_128_BC | AES_128_SUNJCE | AES_256_BC | AES_256_SUNJCE]
symmetric.encryptionsecretkey=AES_128_SUNJCE
# Key defines: algorithm - initialization vector bit length - authentication tag size - provider
# Options: [AES_WITH_GCM_AND_NOPADDING_96_128_BC, AES_WITH_GCM_AND_NOPADDING_96_128_DEFAULT]
symmetric.cipher=AES_WITH_GCM_AND_NOPADDING_96_128_BC
# Key defines: algorithm - key size - provider
# Options: [HMAC_WITH_SHA256_256]
symmetric.macsecretkey=HMAC_WITH_SHA256_256
# Key defines: algorithm - provider for UNIX systems
# Options: [NATIVE_PRNG_SUN]
symmetric.key.securerandom.unix=NATIVE_PRNG_SUN
# Key defines: algorithm - provider for WINDOWS systems
# Options: [PRNG_SUN_MSCAPI]
symmetric.key.securerandom.windows=PRNG_SUN_MSCAPI
# Key defines: algorithm - provider for UNIX systems
# Options: [NATIVE_PRNG_SUN]
symmetric.cipher.securerandom.unix=NATIVE_PRNG_SUN
# Key defines: algorithm - provider for WINDOWS systems
# Options: [PRNG_SUN_MSCAPI]
symmetric.cipher.securerandom.windows=PRNG_SUN_MSCAPI
# Key defines: algorithm - provider
# Options: [HMAC_WITH_SHA256_SUN, HMAC_WITH_SHA256_BC, HMAC_WITH_SHA256_DEFAULT]
symmetric.mac=HMAC_WITH_SHA256_SUN
##===========
## Asymmetric
##===========
# Key defines: algorithm - key size - public exponent - provider
# Options: [RSA_2048_F4_SUN_RSA_SIGN | RSA_3072_F4_SUN_RSA_SIGN | RSA_4096_F4_SUN_RSA_SIGN | RSA_2048_F4_BC | RSA_3072_F4_BC | RSA_4096_F4_BC]
asymmetric.signingkeypair=RSA_2048_F4_SUN_RSA_SIGN
# Key defines: algorithm - key size - public exponent - provider
# Options: [RSA_2048_F4_SUN_RSA_SIGN | RSA_3072_F4_SUN_RSA_SIGN | RSA_4096_F4_SUN_RSA_SIGN | RSA_2048_F4_BC | RSA_3072_F4_BC | RSA_4096_F4_BC]
asymmetric.encryptionkeypair=RSA_2048_F4_SUN_RSA_SIGN
# Key defines: algorithm - provider for UNIX systems
# Options: [NATIVE_PRNG_SUN]
asymmetric.keypair.securerandom.unix=NATIVE_PRNG_SUN
# Key defines: algorithm - provider for WINDOWS systems
# Options: [PRNG_SUN_MSCAPI]
asymmetric.keypair.securerandom.windows=PRNG_SUN_MSCAPI
# Key defines: algorithm - provider
# Options: [ RSA_WITH_RSA_KEM_AND_KDF1_AND_SHA256_* | RSA_WITH_RSA_KEM_AND_KDF2_AND_SHA256_*]
# (where * = BC or DEFAULT)
asymmetric.cipher=RSA_WITH_RSA_KEM_AND_KDF1_AND_SHA256_BC
# Key defines: PRNG for UNIX systems
# Options: [NATIVE_PRNG_SUN]
asymmetric.cipher.securerandom.unix=NATIVE_PRNG_SUN
# Key defines: PRNG for WINDOWS systems
# Options: [PRNG_SUN_MSCAPI]
asymmetric.cipher.securerandom.windows=PRNG_SUN_MSCAPI
# Key defines: algorithm - key size - provider
# Options: [AES_128_BC | AES_128_SUNJCE]
asymmetric.cipher.symmetric.encryptionsecretkey=AES_128_SUNJCE
# Key defines: algorithm - initialization vector size - authentication tag size - provider
# Options: [AES_WITH_GCM_AND_NOPADDING_96_128_BC, AES_WITH_GCM_AND_NOPADDING_96_128_DEFAULT]
asymmetric.cipher.symmetric.cipher=AES_WITH_GCM_AND_NOPADDING_96_128_BC
# Key defines: algorithm - padding md - padding mgf - padding mgf md - padding salt size - padding trailer field - provider
# Options: [SHA256_WITH_RSA_AND_PSS_SHA256_MGF1_SHA256_32_1_BC,SHA256_WITH_RSA_AND_PSS_SHA256_MGF1_SHA256_32_1_DEFAULT]
asymmetric.signer=SHA256_WITH_RSA_AND_PSS_SHA256_MGF1_SHA256_32_1_BC
# Key defines: algorithm - padding md - padding mgf - padding mgf md - padding salt size - padding trailer field - provider
# Options: [SHA256_WITH_RSA_SHA256_BC,SHA256_WITH_RSA_SHA256_DEFAULT]
asymmetric.cms.signer=SHA256_WITH_RSA_SHA256_BC
# Key defines: PRNG for UNIX systems
# Options: [NATIVE_PRNG_SUN]
asymmetric.signer.securerandom.unix=NATIVE_PRNG_SUN
# Key defines: PRNG for WINDOWS systems
# Options: [PRNG_SUN_MSCAPI]
asymmetric.signer.securerandom.windows=PRNG_SUN_MSCAPI
##=============
## Certificates
##=============
# Key defines: hash and algorithm - provider
# Options: [SHA256_WITH_RSA_BC]
certificates.x509certificate=SHA256_WITH_RSA_BC
# Key defines: algorithm - provider for UNIX systems
# Options: [NATIVE_PRNG_SUN]
certificates.x509certificate.securerandom.unix=NATIVE_PRNG_SUN
# Key defines: algorithm - provider for WINDOWS systems
# Options: [PRNG_SUN_MSCAPI]
certificates.x509certificate.securerandom.windows=PRNG_SUN_MSCAPI
##======================
## ElGamal - Homomorphic
##======================
# Key defines: algorithm - provider for UNIX systems
# Options: [NATIVE_PRNG_SUN]
elgamal.securerandom.unix=NATIVE_PRNG_SUN
# Key defines: algorithm - provider for WINDOWS systems
# Options: [PRNG_SUN_MSCAPI]
elgamal.securerandom.windows=PRNG_SUN_MSCAPI
# Key defines: group type - L the bit length of p - N the bit length of q is L-1
# Options: [QR_2048 | QR_3072]
elgamal.grouptype=QR_2048
##=======
## Proofs
##=======
# Key defines: algorithm - provider for UNIX systems
# Options: [NATIVE_PRNG_SUN]
proofs.securerandom.unix=NATIVE_PRNG_SUN
# Key defines: algorithm - provider for WINDOWS systems
# Options: [PRNG_SUN_MSCAPI]
proofs.securerandom.windows=PRNG_SUN_MSCAPI
# Key defines: character set to be supported the proofs hash builder
# Options: [UTF8]
proofs.hashbuilder.charset=UTF8
# Key defines: hash to be used by the proofs hash builder
# Options: [SHA256_SUN | SHA256_BC | SHA256_DEFAULT | SHA512_224_BC | SHA512_224_DEFAULT]
proofs.hashbuilder.messagedigest=SHA256_SUN
##=======
## Stores
##=======
# Key defines: provider
# Options: [ SUN | BC | DEFAULT ]
stores.keystore=SUN
##===============
## Extended-Keystore
##===============
# Key defines: type - provider
# Options: [PKCS12_BC | PKCS12_SUN_JSSE | PKCS12_DEFAULT]
extended.keystore.p12=PKCS12_SUN_JSSE
# Key defines: algorithm - provider for UNIX systems
# Options: [NATIVE_PRNG_SUN]
primitives.securerandom.unix.p12=NATIVE_PRNG_SUN
# Key defines: algorithm - provider for WINDOWS systems
# Options: [PRNG_SUN_MSCAPI]
primitives.securerandom.windows.p12=PRNG_SUN_MSCAPI
# Key defines: algorithm - hash - provider
# Options: [ MGF1_SHA256_BC | MGF1_SHA256_DEFAULT]
primitives.kdfderivation.p12=MGF1_SHA256_BC
# Key defines: algorithm - iterations - hash - salt bit length - provider - key bit length
# Options: [ PBKDF2_32000_SHA256_256_SUNJCE_KL128 | PBKDF2_32000_SHA256_256_BC_KL128]
# NOTE: PBKDF2_32000_SHA256_256_SUNJCE_KL128 is supported since JCE 1.8
primitives.pbkdfderivation.p12=PBKDF2_32000_SHA256_256_BC_KL128
# Key defines: algorithm - provider for UNIX systems
# Options: [NATIVE_PRNG_SUN]
primitives.pbkdfderivation.securerandom.p12.unix=NATIVE_PRNG_SUN
# Key defines: algorithm - provider for WINDOWS systems
# Options: [PRNG_SUN_MSCAPI]
primitives.pbkdfderivation.securerandom.p12.windows=PRNG_SUN_MSCAPI
