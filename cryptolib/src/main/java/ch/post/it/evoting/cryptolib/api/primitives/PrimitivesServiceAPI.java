/*
 * (c) Original Developers indicated in attribution.txt, 2021. All Rights Reserved.
 */
package ch.post.it.evoting.cryptolib.api.primitives;

import java.io.InputStream;
import java.nio.charset.Charset;
import java.security.MessageDigest;
import java.util.stream.Stream;

import ch.post.it.evoting.cryptolib.api.derivation.CryptoAPIKDFDeriver;
import ch.post.it.evoting.cryptolib.api.derivation.CryptoAPIPBKDFDeriver;
import ch.post.it.evoting.cryptolib.api.exceptions.GeneralCryptoLibException;
import ch.post.it.evoting.cryptolib.api.securerandom.CryptoAPIRandomInteger;
import ch.post.it.evoting.cryptolib.api.securerandom.CryptoAPIRandomString;

/**
 * An API for creating Random data, hashing and key deriving.
 */
public interface PrimitivesServiceAPI {

	/**
	 * Provides a random integer generator.
	 *
	 * @return a {@link CryptoAPIRandomInteger}.
	 */
	CryptoAPIRandomInteger getCryptoRandomInteger();

	/**
	 * Provides a {@link CryptoAPIRandomString} already configured to return random strings according to the RFC 4648 base32 alphabet.
	 *
	 * @return a {@link CryptoAPIRandomString}
	 */
	CryptoAPIRandomString get32CharAlphabetCryptoRandomString();

	/**
	 * Provides a {@link CryptoAPIRandomString} already configured to return random strings according to the RFC 4648 base64 alphabet.
	 *
	 * @return a {@link CryptoAPIRandomString}
	 */
	CryptoAPIRandomString get64CharAlphabetCryptoRandomString();

	/**
	 * Provides a KDF key deriver.
	 *
	 * @return a {@link CryptoAPIKDFDeriver}.
	 */
	CryptoAPIKDFDeriver getKDFDeriver();

	/**
	 * Provides a PBKDF key deriver.
	 *
	 * @return a {@link CryptoAPIPBKDFDeriver}.
	 */
	CryptoAPIPBKDFDeriver getPBKDFDeriver();

	/**
	 * Implements the algorithm GenRandomBytes. Given a positive integer {@code lengthInBytes}, this method generates a byte array of {@code
	 * lengthInBytes} bytes.
	 *
	 * @param lengthInBytes The lengthInBytes that specifies how many bytes are to be generated.
	 * @return a byte array generated by {@link java.security.SecureRandom}.
	 * @throws GeneralCryptoLibException if {@code lengthInBytes} is out of the range for this generator.
	 * @see java.security.SecureRandom#nextBytes(byte[] bytes)
	 */
	byte[] genRandomBytes(final int lengthInBytes) throws GeneralCryptoLibException;

	/**
	 * Generates a hash for the given data.
	 *
	 * @param data the input data for the hash.
	 * @return The byte[] representing the generated hash.
	 * @throws GeneralCryptoLibException if {@code data[]} is not correct.
	 */
	byte[] getHash(final byte[] data) throws GeneralCryptoLibException;

	/**
	 * Generates a hash for the data that is readable from an input stream.
	 *
	 * @param in the input stream from which data should be read.
	 * @return the byte[] representing the generated hash.
	 * @throws GeneralCryptoLibException if there are any problems reading data from {@code in}.
	 */
	byte[] getHash(final InputStream in) throws GeneralCryptoLibException;

	/**
	 * Generates a digest for one or more objects. The message is composed of the Base64 encoding of the objects' {@code toString()} methods,
	 * separated by a character outside the Base64 alphabet.
	 *
	 * @param objectsToHash the objects to hash
	 * @param charset       the charset used in the conversion from strings to byte arrays
	 * @return a digest of the object's toString() methods and the separators.
	 */
	byte[] getHashOfObjects(Stream<?> objectsToHash, Charset charset);

	/**
	 * Method for returning a raw {@link MessageDigest} with the appropriate policies set for working on more low-level functionalities.
	 *
	 * @return The raw {@link MessageDigest}.
	 */
	MessageDigest getRawMessageDigest();
}
